/* Generated by Cython 0.9.8.1.1 on Tue Feb  3 12:28:45 2009 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#include "structmember.h"
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
#endif
#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
#endif
#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
       void *buf;
       Py_ssize_t len;
       int readonly;
       const char *format;
       int ndim;
       Py_ssize_t *shape;
       Py_ssize_t *strides;
       Py_ssize_t *suboffsets;
       Py_ssize_t itemsize;
       void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_LOCK 0x0002
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyString_Type                PyBytes_Type
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define PyBytes_Type                 PyString_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
#else
  #define _USE_MATH_DEFINES
#endif
#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif
#include <math.h>
#define __PYX_HAVE_API__pyffmpeg__pyffmpeg
#include "mathematics.h"
#include "avutil.h"
#include "avcodec.h"
#include "avformat.h"
#include "avio.h"


#ifdef __GNUC__
#define INLINE __inline__
#elif _WIN32
#define INLINE __inline
#else
#define INLINE 
#endif

typedef struct {PyObject **p; char *s; long n; char is_unicode; char intern; char is_identifier;} __Pyx_StringTabEntry; /*proto*/



static int __pyx_skip_dispatch = 0;


/* Type Conversion Predeclarations */

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyBytes_FromString PyString_FromString
#define __Pyx_PyBytes_AsString   PyString_AsString
#else
#define __Pyx_PyBytes_FromString PyBytes_FromString
#define __Pyx_PyBytes_AsString   PyBytes_AsString
#endif

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static INLINE int __Pyx_PyObject_IsTrue(PyObject* x);
static INLINE PY_LONG_LONG __pyx_PyInt_AsLongLong(PyObject* x);
static INLINE unsigned PY_LONG_LONG __pyx_PyInt_AsUnsignedLongLong(PyObject* x);
static INLINE Py_ssize_t __pyx_PyIndex_AsSsize_t(PyObject* b);

#define __pyx_PyInt_AsLong(x) (PyInt_CheckExact(x) ? PyInt_AS_LONG(x) : PyInt_AsLong(x))
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))

static INLINE unsigned char __pyx_PyInt_unsigned_char(PyObject* x);
static INLINE unsigned short __pyx_PyInt_unsigned_short(PyObject* x);
static INLINE char __pyx_PyInt_char(PyObject* x);
static INLINE short __pyx_PyInt_short(PyObject* x);
static INLINE int __pyx_PyInt_int(PyObject* x);
static INLINE long __pyx_PyInt_long(PyObject* x);
static INLINE signed char __pyx_PyInt_signed_char(PyObject* x);
static INLINE signed short __pyx_PyInt_signed_short(PyObject* x);
static INLINE signed int __pyx_PyInt_signed_int(PyObject* x);
static INLINE signed long __pyx_PyInt_signed_long(PyObject* x);
static INLINE long double __pyx_PyInt_long_double(PyObject* x);
#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 ||               (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;
static const char **__pyx_f;

static INLINE void __Pyx_RaiseArgtupleTooLong(Py_ssize_t num_expected, Py_ssize_t num_found); /*proto*/

static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static INLINE int __Pyx_SetItemInt(PyObject *o, Py_ssize_t i, PyObject *v, int is_unsigned) {
    int r;
    if (PyList_CheckExact(o) && 0 <= i && i < PyList_GET_SIZE(o)) {
        Py_DECREF(PyList_GET_ITEM(o, i));
        Py_INCREF(v);
        PyList_SET_ITEM(o, i, v);
        return 1;
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_ass_item && (likely(i >= 0) || !is_unsigned))
        r = PySequence_SetItem(o, i, v);
    else {
        PyObject *j = (likely(i >= 0) || !is_unsigned) ? PyInt_FromLong(i) : PyLong_FromUnsignedLongLong((sizeof(unsigned long long) > sizeof(Py_ssize_t) ? (1ULL << (sizeof(Py_ssize_t)*8)) : 0) + i);
        if (!j)
            return -1;
        r = PyObject_SetItem(o, j, v);
        Py_DECREF(j);
    }
    return r;
}

static INLINE PyObject* __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (PyList_Append(L, x) < 0) return NULL;
        Py_INCREF(Py_None);
        return Py_None; // this is just to have an accurate signature
    }
    else {
        return PyObject_CallMethod(L, "append", "(O)", x);
    }
}

static void __Pyx_WriteUnraisable(const char *name); /*proto*/

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/

/* Type declarations */

typedef signed PY_LONG_LONG __pyx_t_8pyffmpeg_8pyffmpeg_int64_t;

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":23
 * ctypedef signed long long int64_t
 * 
 * cdef enum:             # <<<<<<<<<<<<<<
 * 	SEEK_SET = 0
 * 	SEEK_CUR = 1
 */

enum  {
  __pyx_e_8pyffmpeg_8pyffmpeg_SEEK_SET = 0,
  __pyx_e_8pyffmpeg_8pyffmpeg_SEEK_CUR = 1,
  __pyx_e_8pyffmpeg_8pyffmpeg_SEEK_END = 2
};

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":289
 * AV_TIME_BASE_Q.num = 1
 * AV_TIME_BASE_Q.den = AV_TIME_BASE
 * cdef class VideoStream:             # <<<<<<<<<<<<<<
 * 	cdef AVFormatContext *FormatCtx
 * 	cdef AVCodecContext *CodecCtx
 */

struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream {
  PyObject_HEAD
  struct __pyx_vtabstruct_8pyffmpeg_8pyffmpeg_VideoStream *__pyx_vtab;
  struct AVFormatContext *FormatCtx;
  struct AVCodecContext *CodecCtx;
  struct AVCodec *Codec;
  struct AVPacket packet;
  int videoStream;
  struct AVFrame *frame;
  int frameno;
  PyObject *filename;
  PyObject *index;
  PyObject *keyframes;
};


struct __pyx_vtabstruct_8pyffmpeg_8pyffmpeg_VideoStream {
  struct AVFrame *(*ConvertToRGBA)(struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *, struct AVPicture *, struct AVCodecContext *);
  struct AVFrame *(*ConvertToRGB24)(struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *, struct AVPicture *, struct AVCodecContext *);
};
static struct __pyx_vtabstruct_8pyffmpeg_8pyffmpeg_VideoStream *__pyx_vtabptr_8pyffmpeg_8pyffmpeg_VideoStream;
/* Module declarations from pyffmpeg.pyffmpeg */

static PyTypeObject *__pyx_ptype_8pyffmpeg_8pyffmpeg_VideoStream = 0;
static PyObject *__pyx_v_8pyffmpeg_8pyffmpeg___registered;
static struct AVRational __pyx_v_8pyffmpeg_8pyffmpeg_AV_TIME_BASE_Q;
static PyObject *__pyx_k_1;


/* Implementation of pyffmpeg.pyffmpeg */
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static char __pyx_k___cinit__[] = "__cinit__";
static PyObject *__pyx_kp___cinit__;
static char __pyx_k_dump[] = "dump";
static PyObject *__pyx_kp_dump;
static char __pyx_k_open[] = "open";
static PyObject *__pyx_kp_open;
static char __pyx_k_SaveFrame[] = "SaveFrame";
static PyObject *__pyx_kp_SaveFrame;
static char __pyx_k_GetCurrentFrame[] = "GetCurrentFrame";
static PyObject *__pyx_kp_GetCurrentFrame;
static char __pyx_k___next_frame[] = "__next_frame";
static PyObject *__pyx_kp___next_frame;
static char __pyx_k_GetNextFrame[] = "GetNextFrame";
static PyObject *__pyx_kp_GetNextFrame;
static char __pyx_k_build_index[] = "build_index";
static PyObject *__pyx_kp_build_index;
static char __pyx_k_build_index_full[] = "build_index_full";
static PyObject *__pyx_kp_build_index_full;
static char __pyx_k_build_index_fast[] = "build_index_fast";
static PyObject *__pyx_kp_build_index_fast;
static char __pyx_k_GetFrameTime[] = "GetFrameTime";
static PyObject *__pyx_kp_GetFrameTime;
static char __pyx_k_GetFramePts[] = "GetFramePts";
static PyObject *__pyx_kp_GetFramePts;
static char __pyx_k_GetFrameNo[] = "GetFrameNo";
static PyObject *__pyx_kp_GetFrameNo;
static char __pyx_k_Image[] = "Image";
static PyObject *__pyx_kp_Image;
static char __pyx_k_py_av_register_all[] = "py_av_register_all";
static PyObject *__pyx_kp_py_av_register_all;
static char __pyx_k_IOError[] = "IOError";
static PyObject *__pyx_kp_IOError;
static char __pyx_k_MemoryError[] = "MemoryError";
static PyObject *__pyx_kp_MemoryError;
static char __pyx_k_10[] = "wb";
static PyObject *__pyx_kp_10;
static char __pyx_k_write[] = "write";
static PyObject *__pyx_kp_write;
static char __pyx_k_flush[] = "flush";
static PyObject *__pyx_kp_flush;
static char __pyx_k_close[] = "close";
static PyObject *__pyx_kp_close;
static char __pyx_k_frombuffer[] = "frombuffer";
static PyObject *__pyx_kp_frombuffer;
static char __pyx_k_12[] = "RGBA";
static PyObject *__pyx_kp_12;
static char __pyx_k_13[] = "raw";
static PyObject *__pyx_kp_13;
static char __pyx_k_14[] = "BGRA";
static PyObject *__pyx_kp_14;
static char __pyx_k_20[] = "I";
static PyObject *__pyx_kp_20;
static char __pyx_k_21[] = "P";
static PyObject *__pyx_kp_21;
static char __pyx_k_22[] = "B";
static PyObject *__pyx_kp_22;
static char __pyx_k_23[] = "S";
static PyObject *__pyx_kp_23;
static char __pyx_k_24[] = "SI";
static PyObject *__pyx_kp_24;
static char __pyx_k_25[] = "SP";
static PyObject *__pyx_kp_25;
static char __pyx_k_26[] = "U";
static PyObject *__pyx_kp_26;
static char __pyx_k_append[] = "append";
static PyObject *__pyx_kp_append;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_kp_2;
static PyObject *__pyx_kp_3;
static PyObject *__pyx_kp_4;
static PyObject *__pyx_kp_5;
static PyObject *__pyx_kp_6;
static char __pyx_k_2[] = "Unable to open file %s";
static char __pyx_k_3[] = "Unable to find stream info: %d";
static char __pyx_k_4[] = "Unable to find video stream";
static char __pyx_k_5[] = "Unable to get decoder";
static char __pyx_k_6[] = "Unable to open codec";
static PyObject *__pyx_kp_7;
static char __pyx_k_7[] = "Unable to allocate RGB Frame";
static PyObject *__pyx_kp_8;
static char __pyx_k_8[] = "Unable to allocate RGB Frame";
static PyObject *__pyx_kp_9;
static PyObject *__pyx_kp_11;
static char __pyx_k_9[] = "frame%04d.ppm";
static char __pyx_k_11[] = "P6\n%d %d\n255\n";
static PyObject *__pyx_kp_15;
static PyObject *__pyx_kp_16;
static char __pyx_k_15[] = "Unable to read frame: %d";
static char __pyx_k_16[] = "Unable to decode video picture: %d";
static PyObject *__pyx_kp_17;
static PyObject *__pyx_kp_18;
static PyObject *__pyx_kp_19;
static PyObject *__pyx_kp_27;
static char __pyx_k_17[] = "Error rewinding stream for full indexing: %d";
static char __pyx_k_18[] = "Error reading frame for full indexing: %d";
static char __pyx_k_19[] = "Unable to decode video picture: %d";
static char __pyx_k_27[] = "Error rewinding stream after full indexing: %d";
static PyObject *__pyx_kp_28;
static PyObject *__pyx_kp_29;
static PyObject *__pyx_kp_30;
static char __pyx_k_28[] = "Error rewinding stream for fast indexing: %d";
static char __pyx_k_29[] = "Error reading frame for fast indexing: %d";
static char __pyx_k_30[] = "Error rewinding stream after fast indexing: %d";
static PyObject *__pyx_kp_31;
static char __pyx_k_31[] = "Unable to seek: %d";

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":280
 * __registered = 0
 * 
 * def py_av_register_all():             # <<<<<<<<<<<<<<
 * 	if __registered:
 * 		return
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_py_av_register_all(PyObject *__pyx_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_py_av_register_all(PyObject *__pyx_self, PyObject *unused) {
  PyObject *__pyx_v___registered;
  PyObject *__pyx_r;
  int __pyx_1;
  __pyx_self = __pyx_self;
  __pyx_v___registered = Py_None; Py_INCREF(Py_None);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":281
 * 
 * def py_av_register_all():
 * 	if __registered:             # <<<<<<<<<<<<<<
 * 		return
 * 	__registered = 1
 */
  __pyx_1 = __Pyx_PyObject_IsTrue(__pyx_v___registered); if (unlikely(__pyx_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":282
 * def py_av_register_all():
 * 	if __registered:
 * 		return             # <<<<<<<<<<<<<<
 * 	__registered = 1
 * 	av_register_all()
 */
    __pyx_r = Py_None; Py_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":283
 * 	if __registered:
 * 		return
 * 	__registered = 1             # <<<<<<<<<<<<<<
 * 	av_register_all()
 * 
 */
  Py_INCREF(__pyx_int_1);
  Py_DECREF(__pyx_v___registered);
  __pyx_v___registered = __pyx_int_1;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":284
 * 		return
 * 	__registered = 1
 * 	av_register_all()             # <<<<<<<<<<<<<<
 * 
 * cdef AVRational AV_TIME_BASE_Q
 */
  av_register_all();

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.py_av_register_all");
  __pyx_r = NULL;
  __pyx_L0:;
  Py_DECREF(__pyx_v___registered);
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":301
 * 	cdef object keyframes
 * 
 * 	def __new__(self):             # <<<<<<<<<<<<<<
 * 		self.FormatCtx = NULL
 * 		self.frame = avcodec_alloc_frame()
 */

static int __pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream___new__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream___new__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleTooLong(0, PyTuple_GET_SIZE(__pyx_args));
    return -1;
  }
  if (unlikely(__pyx_kwds)) {
    if (unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__new__", 0))) return -1;
  }

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":302
 * 
 * 	def __new__(self):
 * 		self.FormatCtx = NULL             # <<<<<<<<<<<<<<
 * 		self.frame = avcodec_alloc_frame()
 * 		self.frameno = 0
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx = NULL;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":303
 * 	def __new__(self):
 * 		self.FormatCtx = NULL
 * 		self.frame = avcodec_alloc_frame()             # <<<<<<<<<<<<<<
 * 		self.frameno = 0
 * 		self.videoStream = -1
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->frame = avcodec_alloc_frame();

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":304
 * 		self.FormatCtx = NULL
 * 		self.frame = avcodec_alloc_frame()
 * 		self.frameno = 0             # <<<<<<<<<<<<<<
 * 		self.videoStream = -1
 * 		self.Codec = NULL
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->frameno = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":305
 * 		self.frame = avcodec_alloc_frame()
 * 		self.frameno = 0
 * 		self.videoStream = -1             # <<<<<<<<<<<<<<
 * 		self.Codec = NULL
 * 		self.filename = None
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream = -1;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":306
 * 		self.frameno = 0
 * 		self.videoStream = -1
 * 		self.Codec = NULL             # <<<<<<<<<<<<<<
 * 		self.filename = None
 * 		self.index = None
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->Codec = NULL;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":307
 * 		self.videoStream = -1
 * 		self.Codec = NULL
 * 		self.filename = None             # <<<<<<<<<<<<<<
 * 		self.index = None
 * 		self.keyframes = None
 */
  Py_INCREF(Py_None);
  Py_DECREF(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->filename);
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->filename = Py_None;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":308
 * 		self.Codec = NULL
 * 		self.filename = None
 * 		self.index = None             # <<<<<<<<<<<<<<
 * 		self.keyframes = None
 * 
 */
  Py_INCREF(Py_None);
  Py_DECREF(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->index);
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->index = Py_None;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":309
 * 		self.filename = None
 * 		self.index = None
 * 		self.keyframes = None             # <<<<<<<<<<<<<<
 * 
 * 	def dump(self):
 */
  Py_INCREF(Py_None);
  Py_DECREF(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes);
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes = Py_None;

  __pyx_r = 0;
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":311
 * 		self.keyframes = None
 * 
 * 	def dump(self):             # <<<<<<<<<<<<<<
 * 		dump_format(self.FormatCtx,0,self.filename,0)
 * 
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_dump(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_dump(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r;
  char *__pyx_1;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":312
 * 
 * 	def dump(self):
 * 		dump_format(self.FormatCtx,0,self.filename,0)             # <<<<<<<<<<<<<<
 * 
 * 	def open(self,char *filename):
 */
  __pyx_1 = __Pyx_PyBytes_AsString(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->filename); if (unlikely((!__pyx_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  dump_format(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, 0, __pyx_1, 0);

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.dump");
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":314
 * 		dump_format(self.FormatCtx,0,self.filename,0)
 * 
 * 	def open(self,char *filename):             # <<<<<<<<<<<<<<
 * 		cdef AVFormatContext *pFormatCtx
 * 		cdef int ret
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_open(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_open(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char *__pyx_v_filename;
  struct AVFormatContext *__pyx_v_pFormatCtx;
  int __pyx_v_ret;
  int __pyx_v_i;
  PyObject *__pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  int __pyx_3;
  int __pyx_4;
  assert(__pyx_arg_filename); {
    __pyx_v_filename = __Pyx_PyBytes_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.open");
  return NULL;
  __pyx_L4:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":319
 * 		cdef int i
 * 
 * 		py_av_register_all()             # <<<<<<<<<<<<<<
 * 		ret = av_open_input_file(&self.FormatCtx,filename,NULL,0,NULL)
 * 		pFormatCtx = <AVFormatContext *>self.FormatCtx
 */
  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_py_av_register_all); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;
  Py_DECREF(__pyx_2); __pyx_2 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":320
 * 
 * 		py_av_register_all()
 * 		ret = av_open_input_file(&self.FormatCtx,filename,NULL,0,NULL)             # <<<<<<<<<<<<<<
 * 		pFormatCtx = <AVFormatContext *>self.FormatCtx
 * 		if ret != 0:
 */
  __pyx_v_ret = av_open_input_file((&((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx), __pyx_v_filename, NULL, 0, NULL);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":321
 * 		py_av_register_all()
 * 		ret = av_open_input_file(&self.FormatCtx,filename,NULL,0,NULL)
 * 		pFormatCtx = <AVFormatContext *>self.FormatCtx             # <<<<<<<<<<<<<<
 * 		if ret != 0:
 * 			raise IOError("Unable to open file %s" % filename)
 */
  __pyx_v_pFormatCtx = ((struct AVFormatContext *)((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":322
 * 		ret = av_open_input_file(&self.FormatCtx,filename,NULL,0,NULL)
 * 		pFormatCtx = <AVFormatContext *>self.FormatCtx
 * 		if ret != 0:             # <<<<<<<<<<<<<<
 * 			raise IOError("Unable to open file %s" % filename)
 * 
 */
  __pyx_3 = (__pyx_v_ret != 0);
  if (__pyx_3) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":323
 * 		pFormatCtx = <AVFormatContext *>self.FormatCtx
 * 		if ret != 0:
 * 			raise IOError("Unable to open file %s" % filename)             # <<<<<<<<<<<<<<
 * 
 * 		ret = av_find_stream_info(pFormatCtx)
 */
    __pyx_1 = __Pyx_PyBytes_FromString(__pyx_v_filename); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_2 = PyNumber_Remainder(__pyx_kp_2, __pyx_1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_1); __pyx_1 = 0;
    __pyx_1 = PyTuple_New(1); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    PyTuple_SET_ITEM(__pyx_1, 0, __pyx_2);
    __pyx_2 = 0;
    __pyx_2 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_1), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
    __Pyx_Raise(__pyx_2, 0, 0);
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":325
 * 			raise IOError("Unable to open file %s" % filename)
 * 
 * 		ret = av_find_stream_info(pFormatCtx)             # <<<<<<<<<<<<<<
 * 		if ret < 0:
 * 			raise IOError("Unable to find stream info: %d" % ret)
 */
  __pyx_v_ret = av_find_stream_info(__pyx_v_pFormatCtx);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":326
 * 
 * 		ret = av_find_stream_info(pFormatCtx)
 * 		if ret < 0:             # <<<<<<<<<<<<<<
 * 			raise IOError("Unable to find stream info: %d" % ret)
 * 
 */
  __pyx_3 = (__pyx_v_ret < 0);
  if (__pyx_3) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":327
 * 		ret = av_find_stream_info(pFormatCtx)
 * 		if ret < 0:
 * 			raise IOError("Unable to find stream info: %d" % ret)             # <<<<<<<<<<<<<<
 * 
 * 		self.videoStream = -1
 */
    __pyx_1 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_2 = PyNumber_Remainder(__pyx_kp_3, __pyx_1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_1); __pyx_1 = 0;
    __pyx_1 = PyTuple_New(1); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    PyTuple_SET_ITEM(__pyx_1, 0, __pyx_2);
    __pyx_2 = 0;
    __pyx_2 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_1), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
    __Pyx_Raise(__pyx_2, 0, 0);
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":329
 * 			raise IOError("Unable to find stream info: %d" % ret)
 * 
 * 		self.videoStream = -1             # <<<<<<<<<<<<<<
 * 		for i from 0 <= i < pFormatCtx.nb_streams:
 * 			if pFormatCtx.streams[i].codec.codec_type == CODEC_TYPE_VIDEO:
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream = -1;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":330
 * 
 * 		self.videoStream = -1
 * 		for i from 0 <= i < pFormatCtx.nb_streams:             # <<<<<<<<<<<<<<
 * 			if pFormatCtx.streams[i].codec.codec_type == CODEC_TYPE_VIDEO:
 * 				self.videoStream = i
 */
  __pyx_4 = __pyx_v_pFormatCtx->nb_streams;
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_4; __pyx_v_i++) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":331
 * 		self.videoStream = -1
 * 		for i from 0 <= i < pFormatCtx.nb_streams:
 * 			if pFormatCtx.streams[i].codec.codec_type == CODEC_TYPE_VIDEO:             # <<<<<<<<<<<<<<
 * 				self.videoStream = i
 * 				break
 */
    __pyx_3 = ((__pyx_v_pFormatCtx->streams[__pyx_v_i])->codec->codec_type == CODEC_TYPE_VIDEO);
    if (__pyx_3) {

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":332
 * 		for i from 0 <= i < pFormatCtx.nb_streams:
 * 			if pFormatCtx.streams[i].codec.codec_type == CODEC_TYPE_VIDEO:
 * 				self.videoStream = i             # <<<<<<<<<<<<<<
 * 				break
 * 		if self.videoStream == -1:
 */
      ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream = __pyx_v_i;

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":333
 * 			if pFormatCtx.streams[i].codec.codec_type == CODEC_TYPE_VIDEO:
 * 				self.videoStream = i
 * 				break             # <<<<<<<<<<<<<<
 * 		if self.videoStream == -1:
 * 			raise IOError("Unable to find video stream")
 */
      goto __pyx_L8;
      goto __pyx_L9;
    }
    __pyx_L9:;
  }
  __pyx_L8:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":334
 * 				self.videoStream = i
 * 				break
 * 		if self.videoStream == -1:             # <<<<<<<<<<<<<<
 * 			raise IOError("Unable to find video stream")
 * 
 */
  __pyx_3 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream == -1);
  if (__pyx_3) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":335
 * 				break
 * 		if self.videoStream == -1:
 * 			raise IOError("Unable to find video stream")             # <<<<<<<<<<<<<<
 * 
 * 		self.CodecCtx = pFormatCtx.streams[self.videoStream].codec
 */
    __pyx_1 = PyTuple_New(1); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_INCREF(__pyx_kp_4);
    PyTuple_SET_ITEM(__pyx_1, 0, __pyx_kp_4);
    __pyx_2 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_1), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
    __Pyx_Raise(__pyx_2, 0, 0);
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L10;
  }
  __pyx_L10:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":337
 * 			raise IOError("Unable to find video stream")
 * 
 * 		self.CodecCtx = pFormatCtx.streams[self.videoStream].codec             # <<<<<<<<<<<<<<
 * 		self.Codec = avcodec_find_decoder(self.CodecCtx.codec_id)
 * 
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx = (__pyx_v_pFormatCtx->streams[((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream])->codec;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":338
 * 
 * 		self.CodecCtx = pFormatCtx.streams[self.videoStream].codec
 * 		self.Codec = avcodec_find_decoder(self.CodecCtx.codec_id)             # <<<<<<<<<<<<<<
 * 
 * 		if self.Codec == NULL:
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->Codec = avcodec_find_decoder(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->codec_id);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":340
 * 		self.Codec = avcodec_find_decoder(self.CodecCtx.codec_id)
 * 
 * 		if self.Codec == NULL:             # <<<<<<<<<<<<<<
 * 			raise IOError("Unable to get decoder")
 * 
 */
  __pyx_3 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->Codec == NULL);
  if (__pyx_3) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":341
 * 
 * 		if self.Codec == NULL:
 * 			raise IOError("Unable to get decoder")             # <<<<<<<<<<<<<<
 * 
 * 		# Inform the codec that we can handle truncated bitstreams -- i.e.,
 */
    __pyx_1 = PyTuple_New(1); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_INCREF(__pyx_kp_5);
    PyTuple_SET_ITEM(__pyx_1, 0, __pyx_kp_5);
    __pyx_2 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_1), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
    __Pyx_Raise(__pyx_2, 0, 0);
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L11;
  }
  __pyx_L11:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":345
 * 		# Inform the codec that we can handle truncated bitstreams -- i.e.,
 * 		# bitstreams where frame boundaries can fall in the middle of packets
 * 		if self.Codec.capabilities & CODEC_CAP_TRUNCATED:             # <<<<<<<<<<<<<<
 * 			self.CodecCtx.flags = self.CodecCtx.flags & CODEC_FLAG_TRUNCATED
 * 		# Open codec
 */
  __pyx_4 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->Codec->capabilities & CODEC_CAP_TRUNCATED);
  if (__pyx_4) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":346
 * 		# bitstreams where frame boundaries can fall in the middle of packets
 * 		if self.Codec.capabilities & CODEC_CAP_TRUNCATED:
 * 			self.CodecCtx.flags = self.CodecCtx.flags & CODEC_FLAG_TRUNCATED             # <<<<<<<<<<<<<<
 * 		# Open codec
 * 		ret = avcodec_open(self.CodecCtx, self.Codec)
 */
    ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->flags = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->flags & CODEC_FLAG_TRUNCATED);
    goto __pyx_L12;
  }
  __pyx_L12:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":348
 * 			self.CodecCtx.flags = self.CodecCtx.flags & CODEC_FLAG_TRUNCATED
 * 		# Open codec
 * 		ret = avcodec_open(self.CodecCtx, self.Codec)             # <<<<<<<<<<<<<<
 * 		if ret < 0:
 * 			raise IOError("Unable to open codec")
 */
  __pyx_v_ret = avcodec_open(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->Codec);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":349
 * 		# Open codec
 * 		ret = avcodec_open(self.CodecCtx, self.Codec)
 * 		if ret < 0:             # <<<<<<<<<<<<<<
 * 			raise IOError("Unable to open codec")
 * 		self.filename = filename
 */
  __pyx_3 = (__pyx_v_ret < 0);
  if (__pyx_3) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":350
 * 		ret = avcodec_open(self.CodecCtx, self.Codec)
 * 		if ret < 0:
 * 			raise IOError("Unable to open codec")             # <<<<<<<<<<<<<<
 * 		self.filename = filename
 * 
 */
    __pyx_1 = PyTuple_New(1); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_INCREF(__pyx_kp_6);
    PyTuple_SET_ITEM(__pyx_1, 0, __pyx_kp_6);
    __pyx_2 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_1), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
    __Pyx_Raise(__pyx_2, 0, 0);
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L13;
  }
  __pyx_L13:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":351
 * 		if ret < 0:
 * 			raise IOError("Unable to open codec")
 * 		self.filename = filename             # <<<<<<<<<<<<<<
 * 
 * 	cdef AVFrame *ConvertToRGBA(self,AVPicture *frame,AVCodecContext *pCodecCtx):
 */
  __pyx_1 = __Pyx_PyBytes_FromString(__pyx_v_filename); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->filename);
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->filename = __pyx_1;
  __pyx_1 = 0;

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_1);
  Py_XDECREF(__pyx_2);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.open");
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":353
 * 		self.filename = filename
 * 
 * 	cdef AVFrame *ConvertToRGBA(self,AVPicture *frame,AVCodecContext *pCodecCtx):             # <<<<<<<<<<<<<<
 * 		cdef AVFrame *pFrameRGBA
 * 		cdef int numBytes
 */

static  struct AVFrame *__pyx_f_8pyffmpeg_8pyffmpeg_11VideoStream_ConvertToRGBA(struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *__pyx_v_self, struct AVPicture *__pyx_v_frame, struct AVCodecContext *__pyx_v_pCodecCtx) {
  struct AVFrame *__pyx_v_pFrameRGBA;
  int __pyx_v_numBytes;
  char *__pyx_v_rgb_buffer;
  int __pyx_v_width;
  int __pyx_v_height;
  struct AVFrame *__pyx_r;
  int __pyx_1;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":359
 * 		cdef int width,height
 * 
 * 		pFrameRGBA = avcodec_alloc_frame()             # <<<<<<<<<<<<<<
 * 		if pFrameRGBA == NULL:
 * 			raise MemoryError("Unable to allocate RGB Frame")
 */
  __pyx_v_pFrameRGBA = avcodec_alloc_frame();

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":360
 * 
 * 		pFrameRGBA = avcodec_alloc_frame()
 * 		if pFrameRGBA == NULL:             # <<<<<<<<<<<<<<
 * 			raise MemoryError("Unable to allocate RGB Frame")
 * 
 */
  __pyx_1 = (__pyx_v_pFrameRGBA == NULL);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":361
 * 		pFrameRGBA = avcodec_alloc_frame()
 * 		if pFrameRGBA == NULL:
 * 			raise MemoryError("Unable to allocate RGB Frame")             # <<<<<<<<<<<<<<
 * 
 * 		width = pCodecCtx.width
 */
    __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_INCREF(__pyx_kp_7);
    PyTuple_SET_ITEM(__pyx_2, 0, __pyx_kp_7);
    __pyx_3 = PyObject_Call(__pyx_builtin_MemoryError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
    __Pyx_Raise(__pyx_3, 0, 0);
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":363
 * 			raise MemoryError("Unable to allocate RGB Frame")
 * 
 * 		width = pCodecCtx.width             # <<<<<<<<<<<<<<
 * 		height = pCodecCtx.height
 * 		# Determine required buffer size and allocate buffer
 */
  __pyx_v_width = __pyx_v_pCodecCtx->width;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":364
 * 
 * 		width = pCodecCtx.width
 * 		height = pCodecCtx.height             # <<<<<<<<<<<<<<
 * 		# Determine required buffer size and allocate buffer
 * 		numBytes=avpicture_get_size(PIX_FMT_RGBA32, width,height)
 */
  __pyx_v_height = __pyx_v_pCodecCtx->height;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":366
 * 		height = pCodecCtx.height
 * 		# Determine required buffer size and allocate buffer
 * 		numBytes=avpicture_get_size(PIX_FMT_RGBA32, width,height)             # <<<<<<<<<<<<<<
 * 		# Hrm, how do I figure out when to release the old one....
 * 		rgb_buffer = <char *>PyMem_Malloc(numBytes)
 */
  __pyx_v_numBytes = avpicture_get_size(PIX_FMT_RGBA32, __pyx_v_width, __pyx_v_height);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":368
 * 		numBytes=avpicture_get_size(PIX_FMT_RGBA32, width,height)
 * 		# Hrm, how do I figure out when to release the old one....
 * 		rgb_buffer = <char *>PyMem_Malloc(numBytes)             # <<<<<<<<<<<<<<
 * 		avpicture_fill(<AVPicture *>pFrameRGBA, rgb_buffer, PIX_FMT_RGBA32,
 * 				width, height)
 */
  __pyx_v_rgb_buffer = ((char *)PyMem_Malloc(__pyx_v_numBytes));

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":370
 * 		rgb_buffer = <char *>PyMem_Malloc(numBytes)
 * 		avpicture_fill(<AVPicture *>pFrameRGBA, rgb_buffer, PIX_FMT_RGBA32,
 * 				width, height)             # <<<<<<<<<<<<<<
 * 
 * 		img_convert(<AVPicture *>pFrameRGBA, PIX_FMT_RGBA32,
 */
  avpicture_fill(((struct AVPicture *)__pyx_v_pFrameRGBA), __pyx_v_rgb_buffer, PIX_FMT_RGBA32, __pyx_v_width, __pyx_v_height);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":374
 * 		img_convert(<AVPicture *>pFrameRGBA, PIX_FMT_RGBA32,
 * 					<AVPicture *>frame, pCodecCtx.pix_fmt, width,
 * 					height)             # <<<<<<<<<<<<<<
 * 		return pFrameRGBA
 * 
 */
  img_convert(((struct AVPicture *)__pyx_v_pFrameRGBA), PIX_FMT_RGBA32, ((struct AVPicture *)__pyx_v_frame), __pyx_v_pCodecCtx->pix_fmt, __pyx_v_width, __pyx_v_height);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":375
 * 					<AVPicture *>frame, pCodecCtx.pix_fmt, width,
 * 					height)
 * 		return pFrameRGBA             # <<<<<<<<<<<<<<
 * 
 * 	cdef AVFrame *ConvertToRGB24(self,AVPicture *frame,AVCodecContext *pCodecCtx):
 */
  __pyx_r = __pyx_v_pFrameRGBA;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  __Pyx_WriteUnraisable("pyffmpeg.pyffmpeg.VideoStream.ConvertToRGBA");
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":377
 * 		return pFrameRGBA
 * 
 * 	cdef AVFrame *ConvertToRGB24(self,AVPicture *frame,AVCodecContext *pCodecCtx):             # <<<<<<<<<<<<<<
 * 		cdef AVFrame *pFrameRGB24
 * 		cdef int numBytes
 */

static  struct AVFrame *__pyx_f_8pyffmpeg_8pyffmpeg_11VideoStream_ConvertToRGB24(struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *__pyx_v_self, struct AVPicture *__pyx_v_frame, struct AVCodecContext *__pyx_v_pCodecCtx) {
  struct AVFrame *__pyx_v_pFrameRGB24;
  int __pyx_v_numBytes;
  char *__pyx_v_rgb_buffer;
  int __pyx_v_width;
  int __pyx_v_height;
  struct AVFrame *__pyx_r;
  int __pyx_1;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":383
 * 		cdef int width,height
 * 
 * 		pFrameRGB24 = avcodec_alloc_frame()             # <<<<<<<<<<<<<<
 * 		if pFrameRGB24 == NULL:
 * 			raise MemoryError("Unable to allocate RGB Frame")
 */
  __pyx_v_pFrameRGB24 = avcodec_alloc_frame();

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":384
 * 
 * 		pFrameRGB24 = avcodec_alloc_frame()
 * 		if pFrameRGB24 == NULL:             # <<<<<<<<<<<<<<
 * 			raise MemoryError("Unable to allocate RGB Frame")
 * 
 */
  __pyx_1 = (__pyx_v_pFrameRGB24 == NULL);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":385
 * 		pFrameRGB24 = avcodec_alloc_frame()
 * 		if pFrameRGB24 == NULL:
 * 			raise MemoryError("Unable to allocate RGB Frame")             # <<<<<<<<<<<<<<
 * 
 * 		width = pCodecCtx.width
 */
    __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_INCREF(__pyx_kp_8);
    PyTuple_SET_ITEM(__pyx_2, 0, __pyx_kp_8);
    __pyx_3 = PyObject_Call(__pyx_builtin_MemoryError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
    __Pyx_Raise(__pyx_3, 0, 0);
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":387
 * 			raise MemoryError("Unable to allocate RGB Frame")
 * 
 * 		width = pCodecCtx.width             # <<<<<<<<<<<<<<
 * 		height = pCodecCtx.height
 * 		# Determine required buffer size and allocate buffer
 */
  __pyx_v_width = __pyx_v_pCodecCtx->width;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":388
 * 
 * 		width = pCodecCtx.width
 * 		height = pCodecCtx.height             # <<<<<<<<<<<<<<
 * 		# Determine required buffer size and allocate buffer
 * 		numBytes=avpicture_get_size(PIX_FMT_RGB24, width,height)
 */
  __pyx_v_height = __pyx_v_pCodecCtx->height;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":390
 * 		height = pCodecCtx.height
 * 		# Determine required buffer size and allocate buffer
 * 		numBytes=avpicture_get_size(PIX_FMT_RGB24, width,height)             # <<<<<<<<<<<<<<
 * 		# Hrm, how do I figure out how to release the old one....
 * 		rgb_buffer = <char *>PyMem_Malloc(numBytes)
 */
  __pyx_v_numBytes = avpicture_get_size(PIX_FMT_RGB24, __pyx_v_width, __pyx_v_height);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":392
 * 		numBytes=avpicture_get_size(PIX_FMT_RGB24, width,height)
 * 		# Hrm, how do I figure out how to release the old one....
 * 		rgb_buffer = <char *>PyMem_Malloc(numBytes)             # <<<<<<<<<<<<<<
 * 		avpicture_fill(<AVPicture *>pFrameRGB24, rgb_buffer, PIX_FMT_RGB24,
 * 				width, height)
 */
  __pyx_v_rgb_buffer = ((char *)PyMem_Malloc(__pyx_v_numBytes));

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":394
 * 		rgb_buffer = <char *>PyMem_Malloc(numBytes)
 * 		avpicture_fill(<AVPicture *>pFrameRGB24, rgb_buffer, PIX_FMT_RGB24,
 * 				width, height)             # <<<<<<<<<<<<<<
 * 
 * 		img_convert(<AVPicture *>pFrameRGB24, PIX_FMT_RGB24,
 */
  avpicture_fill(((struct AVPicture *)__pyx_v_pFrameRGB24), __pyx_v_rgb_buffer, PIX_FMT_RGB24, __pyx_v_width, __pyx_v_height);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":398
 * 		img_convert(<AVPicture *>pFrameRGB24, PIX_FMT_RGB24,
 * 					<AVPicture *>frame, pCodecCtx.pix_fmt, width,
 * 					height)             # <<<<<<<<<<<<<<
 * 		return pFrameRGB24
 * 
 */
  img_convert(((struct AVPicture *)__pyx_v_pFrameRGB24), PIX_FMT_RGB24, ((struct AVPicture *)__pyx_v_frame), __pyx_v_pCodecCtx->pix_fmt, __pyx_v_width, __pyx_v_height);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":399
 * 					<AVPicture *>frame, pCodecCtx.pix_fmt, width,
 * 					height)
 * 		return pFrameRGB24             # <<<<<<<<<<<<<<
 * 
 * 	def SaveFrame(self):
 */
  __pyx_r = __pyx_v_pFrameRGB24;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  __Pyx_WriteUnraisable("pyffmpeg.pyffmpeg.VideoStream.ConvertToRGB24");
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":401
 * 		return pFrameRGB24
 * 
 * 	def SaveFrame(self):             # <<<<<<<<<<<<<<
 * 		cdef int i
 * 		cdef void *p
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_SaveFrame(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_SaveFrame(PyObject *__pyx_v_self, PyObject *unused) {
  int __pyx_v_i;
  struct AVFrame *__pyx_v_pFrameRGB;
  int __pyx_v_width;
  int __pyx_v_height;
  PyObject *__pyx_v_filename;
  PyObject *__pyx_v_f;
  PyObject *__pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;
  PyObject *__pyx_4 = 0;
  __pyx_v_filename = Py_None; Py_INCREF(Py_None);
  __pyx_v_f = Py_None; Py_INCREF(Py_None);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":407
 * 		cdef int width,height
 * 
 * 		width = self.CodecCtx.width             # <<<<<<<<<<<<<<
 * 		height = self.CodecCtx.height
 * 
 */
  __pyx_v_width = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->width;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":408
 * 
 * 		width = self.CodecCtx.width
 * 		height = self.CodecCtx.height             # <<<<<<<<<<<<<<
 * 
 * 		# I haven't figured out how to write RGBA data to an ppm file so I use a 24 bit version
 */
  __pyx_v_height = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->height;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":411
 * 
 * 		# I haven't figured out how to write RGBA data to an ppm file so I use a 24 bit version
 * 		pFrameRGB = self.ConvertToRGB24(<AVPicture *>self.frame,self.CodecCtx)             # <<<<<<<<<<<<<<
 * 		filename = "frame%04d.ppm" % self.frameno
 * 		f = open(filename,"wb")
 */
  __pyx_v_pFrameRGB = ((struct __pyx_vtabstruct_8pyffmpeg_8pyffmpeg_VideoStream *)((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->__pyx_vtab)->ConvertToRGB24(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self), ((struct AVPicture *)((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->frame), ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":412
 * 		# I haven't figured out how to write RGBA data to an ppm file so I use a 24 bit version
 * 		pFrameRGB = self.ConvertToRGB24(<AVPicture *>self.frame,self.CodecCtx)
 * 		filename = "frame%04d.ppm" % self.frameno             # <<<<<<<<<<<<<<
 * 		f = open(filename,"wb")
 * 
 */
  __pyx_1 = PyInt_FromLong(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->frameno); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PyNumber_Remainder(__pyx_kp_9, __pyx_1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;
  Py_DECREF(__pyx_v_filename);
  __pyx_v_filename = __pyx_2;
  __pyx_2 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":413
 * 		pFrameRGB = self.ConvertToRGB24(<AVPicture *>self.frame,self.CodecCtx)
 * 		filename = "frame%04d.ppm" % self.frameno
 * 		f = open(filename,"wb")             # <<<<<<<<<<<<<<
 * 
 * 		f.write("P6\n%d %d\n255\n" % (width,height))
 */
  __pyx_1 = PyTuple_New(2); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_v_filename);
  PyTuple_SET_ITEM(__pyx_1, 0, __pyx_v_filename);
  Py_INCREF(__pyx_kp_10);
  PyTuple_SET_ITEM(__pyx_1, 1, __pyx_kp_10);
  __pyx_2 = PyObject_Call(__pyx_builtin_open, ((PyObject *)__pyx_1), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(((PyObject *)__pyx_1)); __pyx_1 = 0;
  Py_DECREF(__pyx_v_f);
  __pyx_v_f = __pyx_2;
  __pyx_2 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":415
 * 		f = open(filename,"wb")
 * 
 * 		f.write("P6\n%d %d\n255\n" % (width,height))             # <<<<<<<<<<<<<<
 * 		f.flush()
 * 		for i from 0 <= i < height:
 */
  __pyx_1 = PyObject_GetAttr(__pyx_v_f, __pyx_kp_write); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PyInt_FromLong(__pyx_v_width); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_3 = PyInt_FromLong(__pyx_v_height); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_4 = PyTuple_New(2); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyTuple_SET_ITEM(__pyx_4, 0, __pyx_2);
  PyTuple_SET_ITEM(__pyx_4, 1, __pyx_3);
  __pyx_2 = 0;
  __pyx_3 = 0;
  __pyx_2 = PyNumber_Remainder(__pyx_kp_11, ((PyObject *)__pyx_4)); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(((PyObject *)__pyx_4)); __pyx_4 = 0;
  __pyx_3 = PyTuple_New(1); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyTuple_SET_ITEM(__pyx_3, 0, __pyx_2);
  __pyx_2 = 0;
  __pyx_4 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_3), NULL); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;
  Py_DECREF(((PyObject *)__pyx_3)); __pyx_3 = 0;
  Py_DECREF(__pyx_4); __pyx_4 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":416
 * 
 * 		f.write("P6\n%d %d\n255\n" % (width,height))
 * 		f.flush()             # <<<<<<<<<<<<<<
 * 		for i from 0 <= i < height:
 * 			f.write(PyBuffer_FromMemory(pFrameRGB.data[0] + i * pFrameRGB.linesize[0],width * 3))
 */
  __pyx_2 = PyObject_GetAttr(__pyx_v_f, __pyx_kp_flush); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_1 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_2); __pyx_2 = 0;
  Py_DECREF(__pyx_1); __pyx_1 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":417
 * 		f.write("P6\n%d %d\n255\n" % (width,height))
 * 		f.flush()
 * 		for i from 0 <= i < height:             # <<<<<<<<<<<<<<
 * 			f.write(PyBuffer_FromMemory(pFrameRGB.data[0] + i * pFrameRGB.linesize[0],width * 3))
 * 		f.close()
 */
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_v_height; __pyx_v_i++) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":418
 * 		f.flush()
 * 		for i from 0 <= i < height:
 * 			f.write(PyBuffer_FromMemory(pFrameRGB.data[0] + i * pFrameRGB.linesize[0],width * 3))             # <<<<<<<<<<<<<<
 * 		f.close()
 * 		PyMem_Free(pFrameRGB.data[0])
 */
    __pyx_3 = PyObject_GetAttr(__pyx_v_f, __pyx_kp_write); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_4 = PyBuffer_FromMemory(((__pyx_v_pFrameRGB->data[0]) + (__pyx_v_i * (__pyx_v_pFrameRGB->linesize[0]))), (__pyx_v_width * 3)); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    PyTuple_SET_ITEM(__pyx_2, 0, __pyx_4);
    __pyx_4 = 0;
    __pyx_1 = PyObject_Call(__pyx_3, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
    Py_DECREF(__pyx_1); __pyx_1 = 0;
  }

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":419
 * 		for i from 0 <= i < height:
 * 			f.write(PyBuffer_FromMemory(pFrameRGB.data[0] + i * pFrameRGB.linesize[0],width * 3))
 * 		f.close()             # <<<<<<<<<<<<<<
 * 		PyMem_Free(pFrameRGB.data[0])
 * 
 */
  __pyx_4 = PyObject_GetAttr(__pyx_v_f, __pyx_kp_close); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_3 = PyObject_Call(__pyx_4, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_4); __pyx_4 = 0;
  Py_DECREF(__pyx_3); __pyx_3 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":420
 * 			f.write(PyBuffer_FromMemory(pFrameRGB.data[0] + i * pFrameRGB.linesize[0],width * 3))
 * 		f.close()
 * 		PyMem_Free(pFrameRGB.data[0])             # <<<<<<<<<<<<<<
 * 
 * 	def GetCurrentFrame(self):
 */
  PyMem_Free((__pyx_v_pFrameRGB->data[0]));

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_1);
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  Py_XDECREF(__pyx_4);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.SaveFrame");
  __pyx_r = NULL;
  __pyx_L0:;
  Py_DECREF(__pyx_v_filename);
  Py_DECREF(__pyx_v_f);
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":422
 * 		PyMem_Free(pFrameRGB.data[0])
 * 
 * 	def GetCurrentFrame(self):             # <<<<<<<<<<<<<<
 * 		cdef AVFrame *pFrameRGB
 * 		cdef object buf_obj
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetCurrentFrame(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetCurrentFrame(PyObject *__pyx_v_self, PyObject *unused) {
  struct AVFrame *__pyx_v_pFrameRGB;
  PyObject *__pyx_v_buf_obj;
  int __pyx_v_numBytes;
  PyObject *__pyx_v_img_image;
  PyObject *__pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;
  PyObject *__pyx_4 = 0;
  __pyx_v_buf_obj = Py_None; Py_INCREF(Py_None);
  __pyx_v_img_image = Py_None; Py_INCREF(Py_None);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":427
 * 		cdef int numBytes
 * 
 * 		pFrameRGB = self.ConvertToRGBA(<AVPicture *>self.frame,self.CodecCtx)             # <<<<<<<<<<<<<<
 * 		numBytes=avpicture_get_size(PIX_FMT_RGBA32, self.CodecCtx.width, self.CodecCtx.height)
 * 		buf_obj = PyBuffer_FromMemory(pFrameRGB.data[0],numBytes)
 */
  __pyx_v_pFrameRGB = ((struct __pyx_vtabstruct_8pyffmpeg_8pyffmpeg_VideoStream *)((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->__pyx_vtab)->ConvertToRGBA(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self), ((struct AVPicture *)((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->frame), ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":428
 * 
 * 		pFrameRGB = self.ConvertToRGBA(<AVPicture *>self.frame,self.CodecCtx)
 * 		numBytes=avpicture_get_size(PIX_FMT_RGBA32, self.CodecCtx.width, self.CodecCtx.height)             # <<<<<<<<<<<<<<
 * 		buf_obj = PyBuffer_FromMemory(pFrameRGB.data[0],numBytes)
 * 
 */
  __pyx_v_numBytes = avpicture_get_size(PIX_FMT_RGBA32, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->width, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->height);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":429
 * 		pFrameRGB = self.ConvertToRGBA(<AVPicture *>self.frame,self.CodecCtx)
 * 		numBytes=avpicture_get_size(PIX_FMT_RGBA32, self.CodecCtx.width, self.CodecCtx.height)
 * 		buf_obj = PyBuffer_FromMemory(pFrameRGB.data[0],numBytes)             # <<<<<<<<<<<<<<
 * 
 * 		img_image = Image.frombuffer("RGBA",(self.CodecCtx.width,self.CodecCtx.height),buf_obj,"raw","BGRA",pFrameRGB.linesize[0],1)
 */
  __pyx_1 = PyBuffer_FromMemory((__pyx_v_pFrameRGB->data[0]), __pyx_v_numBytes); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_v_buf_obj);
  __pyx_v_buf_obj = __pyx_1;
  __pyx_1 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":431
 * 		buf_obj = PyBuffer_FromMemory(pFrameRGB.data[0],numBytes)
 * 
 * 		img_image = Image.frombuffer("RGBA",(self.CodecCtx.width,self.CodecCtx.height),buf_obj,"raw","BGRA",pFrameRGB.linesize[0],1)             # <<<<<<<<<<<<<<
 * 		PyMem_Free(pFrameRGB.data[0])
 * 		return img_image
 */
  __pyx_1 = __Pyx_GetName(__pyx_m, __pyx_kp_Image); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PyObject_GetAttr(__pyx_1, __pyx_kp_frombuffer); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_1 = PyInt_FromLong(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->width); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_3 = PyInt_FromLong(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->height); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_4 = PyTuple_New(2); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyTuple_SET_ITEM(__pyx_4, 0, __pyx_1);
  PyTuple_SET_ITEM(__pyx_4, 1, __pyx_3);
  __pyx_1 = 0;
  __pyx_3 = 0;
  __pyx_1 = PyInt_FromLong((__pyx_v_pFrameRGB->linesize[0])); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_3 = PyTuple_New(7); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_kp_12);
  PyTuple_SET_ITEM(__pyx_3, 0, __pyx_kp_12);
  PyTuple_SET_ITEM(__pyx_3, 1, ((PyObject *)__pyx_4));
  Py_INCREF(__pyx_v_buf_obj);
  PyTuple_SET_ITEM(__pyx_3, 2, __pyx_v_buf_obj);
  Py_INCREF(__pyx_kp_13);
  PyTuple_SET_ITEM(__pyx_3, 3, __pyx_kp_13);
  Py_INCREF(__pyx_kp_14);
  PyTuple_SET_ITEM(__pyx_3, 4, __pyx_kp_14);
  PyTuple_SET_ITEM(__pyx_3, 5, __pyx_1);
  Py_INCREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_3, 6, __pyx_int_1);
  __pyx_4 = 0;
  __pyx_1 = 0;
  __pyx_4 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_3), NULL); if (unlikely(!__pyx_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_2); __pyx_2 = 0;
  Py_DECREF(((PyObject *)__pyx_3)); __pyx_3 = 0;
  Py_DECREF(__pyx_v_img_image);
  __pyx_v_img_image = __pyx_4;
  __pyx_4 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":432
 * 
 * 		img_image = Image.frombuffer("RGBA",(self.CodecCtx.width,self.CodecCtx.height),buf_obj,"raw","BGRA",pFrameRGB.linesize[0],1)
 * 		PyMem_Free(pFrameRGB.data[0])             # <<<<<<<<<<<<<<
 * 		return img_image
 * 
 */
  PyMem_Free((__pyx_v_pFrameRGB->data[0]));

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":433
 * 		img_image = Image.frombuffer("RGBA",(self.CodecCtx.width,self.CodecCtx.height),buf_obj,"raw","BGRA",pFrameRGB.linesize[0],1)
 * 		PyMem_Free(pFrameRGB.data[0])
 * 		return img_image             # <<<<<<<<<<<<<<
 * 
 * 
 */
  Py_INCREF(__pyx_v_img_image);
  __pyx_r = __pyx_v_img_image;
  goto __pyx_L0;

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_1);
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  Py_XDECREF(__pyx_4);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.GetCurrentFrame");
  __pyx_r = NULL;
  __pyx_L0:;
  Py_DECREF(__pyx_v_buf_obj);
  Py_DECREF(__pyx_v_img_image);
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":436
 * 
 * 
 * 	def __next_frame(self):             # <<<<<<<<<<<<<<
 * 		cdef int ret
 * 		cdef int frameFinished
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream___next_frame(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream___next_frame(PyObject *__pyx_v_self, PyObject *unused) {
  int __pyx_v_ret;
  int __pyx_v_frameFinished;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_pts;
  struct AVStream *__pyx_v_stream;
  PyObject *__pyx_r;
  int __pyx_1;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":442
 * 		cdef AVStream *stream
 * 
 * 		frameFinished = 0             # <<<<<<<<<<<<<<
 * 		while frameFinished == 0:
 * 			self.packet.stream_index = -1
 */
  __pyx_v_frameFinished = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":443
 * 
 * 		frameFinished = 0
 * 		while frameFinished == 0:             # <<<<<<<<<<<<<<
 * 			self.packet.stream_index = -1
 * 			while self.packet.stream_index != self.videoStream:
 */
  while (1) {
    __pyx_1 = (__pyx_v_frameFinished == 0);
    if (!__pyx_1) break;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":444
 * 		frameFinished = 0
 * 		while frameFinished == 0:
 * 			self.packet.stream_index = -1             # <<<<<<<<<<<<<<
 * 			while self.packet.stream_index != self.videoStream:
 * 				ret = av_read_frame(self.FormatCtx,&self.packet)
 */
    ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.stream_index = -1;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":445
 * 		while frameFinished == 0:
 * 			self.packet.stream_index = -1
 * 			while self.packet.stream_index != self.videoStream:             # <<<<<<<<<<<<<<
 * 				ret = av_read_frame(self.FormatCtx,&self.packet)
 * 				if ret < 0:
 */
    while (1) {
      __pyx_1 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.stream_index != ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream);
      if (!__pyx_1) break;

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":446
 * 			self.packet.stream_index = -1
 * 			while self.packet.stream_index != self.videoStream:
 * 				ret = av_read_frame(self.FormatCtx,&self.packet)             # <<<<<<<<<<<<<<
 * 				if ret < 0:
 * 					raise IOError("Unable to read frame: %d" % ret)
 */
      __pyx_v_ret = av_read_frame(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, (&((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet));

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":447
 * 			while self.packet.stream_index != self.videoStream:
 * 				ret = av_read_frame(self.FormatCtx,&self.packet)
 * 				if ret < 0:             # <<<<<<<<<<<<<<
 * 					raise IOError("Unable to read frame: %d" % ret)
 * 			ret = avcodec_decode_video(self.CodecCtx,self.frame,&frameFinished,self.packet.data,self.packet.size)
 */
      __pyx_1 = (__pyx_v_ret < 0);
      if (__pyx_1) {

        /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":448
 * 				ret = av_read_frame(self.FormatCtx,&self.packet)
 * 				if ret < 0:
 * 					raise IOError("Unable to read frame: %d" % ret)             # <<<<<<<<<<<<<<
 * 			ret = avcodec_decode_video(self.CodecCtx,self.frame,&frameFinished,self.packet.data,self.packet.size)
 * 			if ret < 0:
 */
        __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_3 = PyNumber_Remainder(__pyx_kp_15, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        Py_DECREF(__pyx_2); __pyx_2 = 0;
        __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
        __pyx_3 = 0;
        __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
        __Pyx_Raise(__pyx_3, 0, 0);
        Py_DECREF(__pyx_3); __pyx_3 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L9;
      }
      __pyx_L9:;
    }

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":449
 * 				if ret < 0:
 * 					raise IOError("Unable to read frame: %d" % ret)
 * 			ret = avcodec_decode_video(self.CodecCtx,self.frame,&frameFinished,self.packet.data,self.packet.size)             # <<<<<<<<<<<<<<
 * 			if ret < 0:
 * 				raise IOError("Unable to decode video picture: %d" % ret)
 */
    __pyx_v_ret = avcodec_decode_video(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->frame, (&__pyx_v_frameFinished), ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.data, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.size);

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":450
 * 					raise IOError("Unable to read frame: %d" % ret)
 * 			ret = avcodec_decode_video(self.CodecCtx,self.frame,&frameFinished,self.packet.data,self.packet.size)
 * 			if ret < 0:             # <<<<<<<<<<<<<<
 * 				raise IOError("Unable to decode video picture: %d" % ret)
 * 
 */
    __pyx_1 = (__pyx_v_ret < 0);
    if (__pyx_1) {

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":451
 * 			ret = avcodec_decode_video(self.CodecCtx,self.frame,&frameFinished,self.packet.data,self.packet.size)
 * 			if ret < 0:
 * 				raise IOError("Unable to decode video picture: %d" % ret)             # <<<<<<<<<<<<<<
 * 
 * 		if self.packet.pts == AV_NOPTS_VALUE:
 */
      __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_3 = PyNumber_Remainder(__pyx_kp_16, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      Py_DECREF(__pyx_2); __pyx_2 = 0;
      __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
      __pyx_3 = 0;
      __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
      __Pyx_Raise(__pyx_3, 0, 0);
      Py_DECREF(__pyx_3); __pyx_3 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      goto __pyx_L10;
    }
    __pyx_L10:;
  }

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":453
 * 				raise IOError("Unable to decode video picture: %d" % ret)
 * 
 * 		if self.packet.pts == AV_NOPTS_VALUE:             # <<<<<<<<<<<<<<
 * 			pts = self.packet.dts
 * 		else:
 */
  __pyx_1 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.pts == AV_NOPTS_VALUE);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":454
 * 
 * 		if self.packet.pts == AV_NOPTS_VALUE:
 * 			pts = self.packet.dts             # <<<<<<<<<<<<<<
 * 		else:
 * 			pts = self.packet.pts
 */
    __pyx_v_pts = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.dts;
    goto __pyx_L11;
  }
  /*else*/ {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":456
 * 			pts = self.packet.dts
 * 		else:
 * 			pts = self.packet.pts             # <<<<<<<<<<<<<<
 * 		stream = self.FormatCtx.streams[self.videoStream]
 * 		return av_rescale(pts,AV_TIME_BASE * <int64_t>stream.time_base.num,stream.time_base.den)
 */
    __pyx_v_pts = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.pts;
  }
  __pyx_L11:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":457
 * 		else:
 * 			pts = self.packet.pts
 * 		stream = self.FormatCtx.streams[self.videoStream]             # <<<<<<<<<<<<<<
 * 		return av_rescale(pts,AV_TIME_BASE * <int64_t>stream.time_base.num,stream.time_base.den)
 * 
 */
  __pyx_v_stream = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx->streams[((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream]);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":458
 * 			pts = self.packet.pts
 * 		stream = self.FormatCtx.streams[self.videoStream]
 * 		return av_rescale(pts,AV_TIME_BASE * <int64_t>stream.time_base.num,stream.time_base.den)             # <<<<<<<<<<<<<<
 * 
 * 	def GetNextFrame(self):
 */
  __pyx_2 = PyLong_FromLongLong(av_rescale(__pyx_v_pts, (AV_TIME_BASE * ((__pyx_t_8pyffmpeg_8pyffmpeg_int64_t)__pyx_v_stream->time_base.num)), __pyx_v_stream->time_base.den)); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_2;
  __pyx_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.__next_frame");
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":460
 * 		return av_rescale(pts,AV_TIME_BASE * <int64_t>stream.time_base.num,stream.time_base.den)
 * 
 * 	def GetNextFrame(self):             # <<<<<<<<<<<<<<
 * 		self.__next_frame()
 * 		return self.GetCurrentFrame()
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetNextFrame(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetNextFrame(PyObject *__pyx_v_self, PyObject *unused) {
  PyObject *__pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":461
 * 
 * 	def GetNextFrame(self):
 * 		self.__next_frame()             # <<<<<<<<<<<<<<
 * 		return self.GetCurrentFrame()
 * 
 */
  __pyx_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp___next_frame); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;
  Py_DECREF(__pyx_2); __pyx_2 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":462
 * 	def GetNextFrame(self):
 * 		self.__next_frame()
 * 		return self.GetCurrentFrame()             # <<<<<<<<<<<<<<
 * 
 * 	def build_index(self,fast = True):
 */
  __pyx_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_GetCurrentFrame); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_r = __pyx_2;
  __pyx_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_1);
  Py_XDECREF(__pyx_2);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.GetNextFrame");
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":464
 * 		return self.GetCurrentFrame()
 * 
 * 	def build_index(self,fast = True):             # <<<<<<<<<<<<<<
 * 		if fast == True:
 * 			return self.build_index_fast()
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_build_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_build_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fast = 0;
  PyObject *__pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  int __pyx_3;
  static char *__pyx_argnames[] = {"fast",0};
  __pyx_v_fast = __pyx_k_1;
  if (likely(!__pyx_kwds) && likely(0 <= PyTuple_GET_SIZE(__pyx_args)) && likely(PyTuple_GET_SIZE(__pyx_args) <= 1)) {
    if (PyTuple_GET_SIZE(__pyx_args) > 0) {
      __pyx_v_fast = PyTuple_GET_ITEM(__pyx_args, 0);
    }
  }
  else {
    if (unlikely(!PyArg_ParseTupleAndKeywords(__pyx_args, __pyx_kwds, "|O", __pyx_argnames, &__pyx_v_fast))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.build_index");
  return NULL;
  __pyx_L4:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":465
 * 
 * 	def build_index(self,fast = True):
 * 		if fast == True:             # <<<<<<<<<<<<<<
 * 			return self.build_index_fast()
 * 		else:
 */
  __pyx_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PyObject_RichCompare(__pyx_v_fast, __pyx_1, Py_EQ); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;
  __pyx_3 = __Pyx_PyObject_IsTrue(__pyx_2); if (unlikely(__pyx_3 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_2); __pyx_2 = 0;
  if (__pyx_3) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":466
 * 	def build_index(self,fast = True):
 * 		if fast == True:
 * 			return self.build_index_fast()             # <<<<<<<<<<<<<<
 * 		else:
 * 			return self.build_index_full()
 */
    __pyx_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_build_index_fast); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_2 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_1); __pyx_1 = 0;
    __pyx_r = __pyx_2;
    __pyx_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":468
 * 			return self.build_index_fast()
 * 		else:
 * 			return self.build_index_full()             # <<<<<<<<<<<<<<
 * 
 * 	def build_index_full(self):
 */
    __pyx_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_build_index_full); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_2 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_1); __pyx_1 = 0;
    __pyx_r = __pyx_2;
    __pyx_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_1);
  Py_XDECREF(__pyx_2);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.build_index");
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":470
 * 			return self.build_index_full()
 * 
 * 	def build_index_full(self):             # <<<<<<<<<<<<<<
 * 		cdef int ret,ret2
 * 
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_build_index_full(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_build_index_full(PyObject *__pyx_v_self, PyObject *unused) {
  int __pyx_v_ret;
  int __pyx_v_ret2;
  int __pyx_v_frameFinished;
  struct AVStream *__pyx_v_stream;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_myPts;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_pts;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_time_base;
  int __pyx_v_frame_no;
  PyObject *__pyx_v_frameFinsished;
  PyObject *__pyx_v_myType;
  PyObject *__pyx_r;
  int __pyx_1;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;
  int __pyx_4;
  __pyx_v_frameFinsished = Py_None; Py_INCREF(Py_None);
  __pyx_v_myType = Py_None; Py_INCREF(Py_None);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":478
 * 		cdef int frame_no
 * 
 * 		if self.index is not None:             # <<<<<<<<<<<<<<
 * 			# already indexed
 * 			return
 */
  __pyx_1 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->index != Py_None);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":480
 * 		if self.index is not None:
 * 			# already indexed
 * 			return             # <<<<<<<<<<<<<<
 * 		self.index = {}
 * 		self.keyframes = []
 */
    __pyx_r = Py_None; Py_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":481
 * 			# already indexed
 * 			return
 * 		self.index = {}             # <<<<<<<<<<<<<<
 * 		self.keyframes = []
 * 		stream = self.FormatCtx.streams[self.videoStream]
 */
  __pyx_2 = PyDict_New(); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->index);
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->index = ((PyObject *)__pyx_2);
  __pyx_2 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":482
 * 			return
 * 		self.index = {}
 * 		self.keyframes = []             # <<<<<<<<<<<<<<
 * 		stream = self.FormatCtx.streams[self.videoStream]
 * 		time_base = AV_TIME_BASE * <int64_t>stream.time_base.num
 */
  __pyx_2 = PyList_New(0); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 482; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes);
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes = ((PyObject *)__pyx_2);
  __pyx_2 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":483
 * 		self.index = {}
 * 		self.keyframes = []
 * 		stream = self.FormatCtx.streams[self.videoStream]             # <<<<<<<<<<<<<<
 * 		time_base = AV_TIME_BASE * <int64_t>stream.time_base.num
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 */
  __pyx_v_stream = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx->streams[((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream]);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":484
 * 		self.keyframes = []
 * 		stream = self.FormatCtx.streams[self.videoStream]
 * 		time_base = AV_TIME_BASE * <int64_t>stream.time_base.num             # <<<<<<<<<<<<<<
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:
 */
  __pyx_v_time_base = (AV_TIME_BASE * ((__pyx_t_8pyffmpeg_8pyffmpeg_int64_t)__pyx_v_stream->time_base.num));

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":485
 * 		stream = self.FormatCtx.streams[self.videoStream]
 * 		time_base = AV_TIME_BASE * <int64_t>stream.time_base.num
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)             # <<<<<<<<<<<<<<
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream for full indexing: %d" % ret)
 */
  __pyx_v_ret = av_seek_frame(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream, 0, AVSEEK_FLAG_BACKWARD);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":486
 * 		time_base = AV_TIME_BASE * <int64_t>stream.time_base.num
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:             # <<<<<<<<<<<<<<
 * 			raise IOError("Error rewinding stream for full indexing: %d" % ret)
 * 		avcodec_flush_buffers(self.CodecCtx)
 */
  __pyx_1 = (__pyx_v_ret < 0);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":487
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream for full indexing: %d" % ret)             # <<<<<<<<<<<<<<
 * 		avcodec_flush_buffers(self.CodecCtx)
 * 
 */
    __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_3 = PyNumber_Remainder(__pyx_kp_17, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
    __pyx_3 = 0;
    __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
    __Pyx_Raise(__pyx_3, 0, 0);
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":488
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream for full indexing: %d" % ret)
 * 		avcodec_flush_buffers(self.CodecCtx)             # <<<<<<<<<<<<<<
 * 
 * 		frame_no = 0
 */
  avcodec_flush_buffers(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":490
 * 		avcodec_flush_buffers(self.CodecCtx)
 * 
 * 		frame_no = 0             # <<<<<<<<<<<<<<
 * 		while True:
 * 			frameFinished = 0
 */
  __pyx_v_frame_no = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":491
 * 
 * 		frame_no = 0
 * 		while True:             # <<<<<<<<<<<<<<
 * 			frameFinished = 0
 * 			while frameFinished == 0:
 */
  while (1) {
    __pyx_1 = 1;
    if (!__pyx_1) break;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":492
 * 		frame_no = 0
 * 		while True:
 * 			frameFinished = 0             # <<<<<<<<<<<<<<
 * 			while frameFinished == 0:
 * 				ret = av_read_frame(self.FormatCtx,&self.packet)
 */
    __pyx_v_frameFinished = 0;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":493
 * 		while True:
 * 			frameFinished = 0
 * 			while frameFinished == 0:             # <<<<<<<<<<<<<<
 * 				ret = av_read_frame(self.FormatCtx,&self.packet)
 * 				if ret < 0:
 */
    while (1) {
      __pyx_1 = (__pyx_v_frameFinished == 0);
      if (!__pyx_1) break;

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":494
 * 			frameFinished = 0
 * 			while frameFinished == 0:
 * 				ret = av_read_frame(self.FormatCtx,&self.packet)             # <<<<<<<<<<<<<<
 * 				if ret < 0:
 * 					# check for eof condition
 */
      __pyx_v_ret = av_read_frame(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, (&((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet));

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":495
 * 			while frameFinished == 0:
 * 				ret = av_read_frame(self.FormatCtx,&self.packet)
 * 				if ret < 0:             # <<<<<<<<<<<<<<
 * 					# check for eof condition
 * 					ret2 = url_feof(&self.FormatCtx.pb)
 */
      __pyx_1 = (__pyx_v_ret < 0);
      if (__pyx_1) {

        /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":497
 * 				if ret < 0:
 * 					# check for eof condition
 * 					ret2 = url_feof(&self.FormatCtx.pb)             # <<<<<<<<<<<<<<
 * 					if ret2 == 0:
 * 						raise IOError("Error reading frame for full indexing: %d" % ret)
 */
        __pyx_v_ret2 = url_feof((&((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx->pb));

        /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":498
 * 					# check for eof condition
 * 					ret2 = url_feof(&self.FormatCtx.pb)
 * 					if ret2 == 0:             # <<<<<<<<<<<<<<
 * 						raise IOError("Error reading frame for full indexing: %d" % ret)
 * 					else:
 */
        __pyx_1 = (__pyx_v_ret2 == 0);
        if (__pyx_1) {

          /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":499
 * 					ret2 = url_feof(&self.FormatCtx.pb)
 * 					if ret2 == 0:
 * 						raise IOError("Error reading frame for full indexing: %d" % ret)             # <<<<<<<<<<<<<<
 * 					else:
 * 						frameFinsished = 1
 */
          __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __pyx_3 = PyNumber_Remainder(__pyx_kp_18, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          Py_DECREF(__pyx_2); __pyx_2 = 0;
          __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
          __pyx_3 = 0;
          __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
          __Pyx_Raise(__pyx_3, 0, 0);
          Py_DECREF(__pyx_3); __pyx_3 = 0;
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          goto __pyx_L12;
        }
        /*else*/ {

          /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":501
 * 						raise IOError("Error reading frame for full indexing: %d" % ret)
 * 					else:
 * 						frameFinsished = 1             # <<<<<<<<<<<<<<
 * 						break
 * 				if self.packet.stream_index != self.videoStream:
 */
          Py_INCREF(__pyx_int_1);
          Py_DECREF(__pyx_v_frameFinsished);
          __pyx_v_frameFinsished = __pyx_int_1;

          /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":502
 * 					else:
 * 						frameFinsished = 1
 * 						break             # <<<<<<<<<<<<<<
 * 				if self.packet.stream_index != self.videoStream:
 * 					# only looking for video packets
 */
          goto __pyx_L10;
        }
        __pyx_L12:;
        goto __pyx_L11;
      }
      __pyx_L11:;

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":503
 * 						frameFinsished = 1
 * 						break
 * 				if self.packet.stream_index != self.videoStream:             # <<<<<<<<<<<<<<
 * 					# only looking for video packets
 * 					continue
 */
      __pyx_1 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.stream_index != ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream);
      if (__pyx_1) {

        /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":505
 * 				if self.packet.stream_index != self.videoStream:
 * 					# only looking for video packets
 * 					continue             # <<<<<<<<<<<<<<
 * 				if self.packet.pts == AV_NOPTS_VALUE:
 * 					pts = self.packet.dts
 */
        goto __pyx_L9;
        goto __pyx_L13;
      }
      __pyx_L13:;

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":506
 * 					# only looking for video packets
 * 					continue
 * 				if self.packet.pts == AV_NOPTS_VALUE:             # <<<<<<<<<<<<<<
 * 					pts = self.packet.dts
 * 				else:
 */
      __pyx_1 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.pts == AV_NOPTS_VALUE);
      if (__pyx_1) {

        /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":507
 * 					continue
 * 				if self.packet.pts == AV_NOPTS_VALUE:
 * 					pts = self.packet.dts             # <<<<<<<<<<<<<<
 * 				else:
 * 					pts = self.packet.pts
 */
        __pyx_v_pts = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.dts;
        goto __pyx_L14;
      }
      /*else*/ {

        /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":509
 * 					pts = self.packet.dts
 * 				else:
 * 					pts = self.packet.pts             # <<<<<<<<<<<<<<
 * 				myPts = av_rescale(pts,time_base,stream.time_base.den)
 * 
 */
        __pyx_v_pts = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.pts;
      }
      __pyx_L14:;

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":510
 * 				else:
 * 					pts = self.packet.pts
 * 				myPts = av_rescale(pts,time_base,stream.time_base.den)             # <<<<<<<<<<<<<<
 * 
 * 				ret = avcodec_decode_video(self.CodecCtx,self.frame,&frameFinished,self.packet.data,self.packet.size)
 */
      __pyx_v_myPts = av_rescale(__pyx_v_pts, __pyx_v_time_base, __pyx_v_stream->time_base.den);

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":512
 * 				myPts = av_rescale(pts,time_base,stream.time_base.den)
 * 
 * 				ret = avcodec_decode_video(self.CodecCtx,self.frame,&frameFinished,self.packet.data,self.packet.size)             # <<<<<<<<<<<<<<
 * 				if ret < 0:
 * 					raise IOError("Unable to decode video picture: %d" % ret)
 */
      __pyx_v_ret = avcodec_decode_video(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->frame, (&__pyx_v_frameFinished), ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.data, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.size);

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":513
 * 
 * 				ret = avcodec_decode_video(self.CodecCtx,self.frame,&frameFinished,self.packet.data,self.packet.size)
 * 				if ret < 0:             # <<<<<<<<<<<<<<
 * 					raise IOError("Unable to decode video picture: %d" % ret)
 * 			if self.frame.pict_type == FF_I_TYPE:
 */
      __pyx_1 = (__pyx_v_ret < 0);
      if (__pyx_1) {

        /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":514
 * 				ret = avcodec_decode_video(self.CodecCtx,self.frame,&frameFinished,self.packet.data,self.packet.size)
 * 				if ret < 0:
 * 					raise IOError("Unable to decode video picture: %d" % ret)             # <<<<<<<<<<<<<<
 * 			if self.frame.pict_type == FF_I_TYPE:
 * 				myType = 'I'
 */
        __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_3 = PyNumber_Remainder(__pyx_kp_19, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        Py_DECREF(__pyx_2); __pyx_2 = 0;
        __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
        __pyx_3 = 0;
        __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
        __Pyx_Raise(__pyx_3, 0, 0);
        Py_DECREF(__pyx_3); __pyx_3 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 514; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L15;
      }
      __pyx_L15:;
      __pyx_L9:;
    }
    __pyx_L10:;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":515
 * 				if ret < 0:
 * 					raise IOError("Unable to decode video picture: %d" % ret)
 * 			if self.frame.pict_type == FF_I_TYPE:             # <<<<<<<<<<<<<<
 * 				myType = 'I'
 * 			elif self.frame.pict_type == FF_P_TYPE:
 */
    switch (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->frame->pict_type) {
      case FF_I_TYPE:

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":516
 * 					raise IOError("Unable to decode video picture: %d" % ret)
 * 			if self.frame.pict_type == FF_I_TYPE:
 * 				myType = 'I'             # <<<<<<<<<<<<<<
 * 			elif self.frame.pict_type == FF_P_TYPE:
 * 				myType = 'P'
 */
      Py_INCREF(__pyx_kp_20);
      Py_DECREF(__pyx_v_myType);
      __pyx_v_myType = __pyx_kp_20;
      break;
      case FF_P_TYPE:

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":518
 * 				myType = 'I'
 * 			elif self.frame.pict_type == FF_P_TYPE:
 * 				myType = 'P'             # <<<<<<<<<<<<<<
 * 			elif self.frame.pict_type == FF_B_TYPE:
 * 				myType = 'B'
 */
      Py_INCREF(__pyx_kp_21);
      Py_DECREF(__pyx_v_myType);
      __pyx_v_myType = __pyx_kp_21;
      break;
      case FF_B_TYPE:

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":520
 * 				myType = 'P'
 * 			elif self.frame.pict_type == FF_B_TYPE:
 * 				myType = 'B'             # <<<<<<<<<<<<<<
 * 			elif self.frame.pict_type == FF_S_TYPE:
 * 				myType = 'S'
 */
      Py_INCREF(__pyx_kp_22);
      Py_DECREF(__pyx_v_myType);
      __pyx_v_myType = __pyx_kp_22;
      break;
      case FF_S_TYPE:

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":522
 * 				myType = 'B'
 * 			elif self.frame.pict_type == FF_S_TYPE:
 * 				myType = 'S'             # <<<<<<<<<<<<<<
 * 			elif self.frame.pict_type == FF_SI_TYPE:
 * 				myType = 'SI'
 */
      Py_INCREF(__pyx_kp_23);
      Py_DECREF(__pyx_v_myType);
      __pyx_v_myType = __pyx_kp_23;
      break;
      case FF_SI_TYPE:

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":524
 * 				myType = 'S'
 * 			elif self.frame.pict_type == FF_SI_TYPE:
 * 				myType = 'SI'             # <<<<<<<<<<<<<<
 * 			elif self.frame.pict_type == FF_SP_TYPE:
 * 				myType = 'SP'
 */
      Py_INCREF(__pyx_kp_24);
      Py_DECREF(__pyx_v_myType);
      __pyx_v_myType = __pyx_kp_24;
      break;
      case FF_SP_TYPE:

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":526
 * 				myType = 'SI'
 * 			elif self.frame.pict_type == FF_SP_TYPE:
 * 				myType = 'SP'             # <<<<<<<<<<<<<<
 * 			else:
 * 				myType = 'U'
 */
      Py_INCREF(__pyx_kp_25);
      Py_DECREF(__pyx_v_myType);
      __pyx_v_myType = __pyx_kp_25;
      break;
      default:

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":528
 * 				myType = 'SP'
 * 			else:
 * 				myType = 'U'             # <<<<<<<<<<<<<<
 * 			self.index[frame_no] = (myPts,myType)
 * 			frame_no = frame_no + 1
 */
      Py_INCREF(__pyx_kp_26);
      Py_DECREF(__pyx_v_myType);
      __pyx_v_myType = __pyx_kp_26;
    }

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":529
 * 			else:
 * 				myType = 'U'
 * 			self.index[frame_no] = (myPts,myType)             # <<<<<<<<<<<<<<
 * 			frame_no = frame_no + 1
 * 			if self.frame.key_frame:
 */
    __pyx_2 = PyLong_FromLongLong(__pyx_v_myPts); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_3 = PyTuple_New(2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    PyTuple_SET_ITEM(__pyx_3, 0, __pyx_2);
    Py_INCREF(__pyx_v_myType);
    PyTuple_SET_ITEM(__pyx_3, 1, __pyx_v_myType);
    __pyx_2 = 0;
    if (__Pyx_SetItemInt(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->index, __pyx_v_frame_no, ((PyObject *)__pyx_3), 0) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 529; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_3)); __pyx_3 = 0;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":530
 * 				myType = 'U'
 * 			self.index[frame_no] = (myPts,myType)
 * 			frame_no = frame_no + 1             # <<<<<<<<<<<<<<
 * 			if self.frame.key_frame:
 * 				self.keyframes.append(myPts)
 */
    __pyx_v_frame_no = (__pyx_v_frame_no + 1);

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":531
 * 			self.index[frame_no] = (myPts,myType)
 * 			frame_no = frame_no + 1
 * 			if self.frame.key_frame:             # <<<<<<<<<<<<<<
 * 				self.keyframes.append(myPts)
 * 
 */
    __pyx_4 = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->frame->key_frame;
    if (__pyx_4) {

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":532
 * 			frame_no = frame_no + 1
 * 			if self.frame.key_frame:
 * 				self.keyframes.append(myPts)             # <<<<<<<<<<<<<<
 * 
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 */
      __pyx_2 = PyLong_FromLongLong(__pyx_v_myPts); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_3 = __Pyx_PyObject_Append(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 532; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      Py_DECREF(__pyx_2); __pyx_2 = 0;
      Py_DECREF(__pyx_3); __pyx_3 = 0;
      goto __pyx_L16;
    }
    __pyx_L16:;
  }

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":534
 * 				self.keyframes.append(myPts)
 * 
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)             # <<<<<<<<<<<<<<
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream after full indexing: %d" % ret)
 */
  __pyx_v_ret = av_seek_frame(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream, 0, AVSEEK_FLAG_BACKWARD);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":535
 * 
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:             # <<<<<<<<<<<<<<
 * 			raise IOError("Error rewinding stream after full indexing: %d" % ret)
 * 		avcodec_flush_buffers(self.CodecCtx)
 */
  __pyx_1 = (__pyx_v_ret < 0);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":536
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream after full indexing: %d" % ret)             # <<<<<<<<<<<<<<
 * 		avcodec_flush_buffers(self.CodecCtx)
 * 
 */
    __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_3 = PyNumber_Remainder(__pyx_kp_27, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
    __pyx_3 = 0;
    __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
    __Pyx_Raise(__pyx_3, 0, 0);
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 536; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L17;
  }
  __pyx_L17:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":537
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream after full indexing: %d" % ret)
 * 		avcodec_flush_buffers(self.CodecCtx)             # <<<<<<<<<<<<<<
 * 
 * 	def build_index_fast(self):
 */
  avcodec_flush_buffers(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx);

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.build_index_full");
  __pyx_r = NULL;
  __pyx_L0:;
  Py_DECREF(__pyx_v_frameFinsished);
  Py_DECREF(__pyx_v_myType);
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":539
 * 		avcodec_flush_buffers(self.CodecCtx)
 * 
 * 	def build_index_fast(self):             # <<<<<<<<<<<<<<
 * 		cdef int ret,ret2
 * 		cdef int64_t myPts,pts,time_base
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_build_index_fast(PyObject *__pyx_v_self, PyObject *unused); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_build_index_fast(PyObject *__pyx_v_self, PyObject *unused) {
  int __pyx_v_ret;
  int __pyx_v_ret2;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_myPts;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_pts;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_time_base;
  struct AVStream *__pyx_v_stream;
  PyObject *__pyx_v_frame_no;
  PyObject *__pyx_r;
  int __pyx_1;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;
  __pyx_v_frame_no = Py_None; Py_INCREF(Py_None);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":544
 * 		cdef AVStream *stream
 * 
 * 		if self.keyframes is not None:             # <<<<<<<<<<<<<<
 * 			# already fast indexed
 * 			return
 */
  __pyx_1 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes != Py_None);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":546
 * 		if self.keyframes is not None:
 * 			# already fast indexed
 * 			return             # <<<<<<<<<<<<<<
 * 		self.keyframes = []
 * 		stream = self.FormatCtx.streams[self.videoStream]
 */
    __pyx_r = Py_None; Py_INCREF(Py_None);
    goto __pyx_L0;
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":547
 * 			# already fast indexed
 * 			return
 * 		self.keyframes = []             # <<<<<<<<<<<<<<
 * 		stream = self.FormatCtx.streams[self.videoStream]
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 */
  __pyx_2 = PyList_New(0); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes);
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes = ((PyObject *)__pyx_2);
  __pyx_2 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":548
 * 			return
 * 		self.keyframes = []
 * 		stream = self.FormatCtx.streams[self.videoStream]             # <<<<<<<<<<<<<<
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:
 */
  __pyx_v_stream = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx->streams[((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream]);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":549
 * 		self.keyframes = []
 * 		stream = self.FormatCtx.streams[self.videoStream]
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)             # <<<<<<<<<<<<<<
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream for fast indexing: %d" % ret)
 */
  __pyx_v_ret = av_seek_frame(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream, 0, AVSEEK_FLAG_BACKWARD);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":550
 * 		stream = self.FormatCtx.streams[self.videoStream]
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:             # <<<<<<<<<<<<<<
 * 			raise IOError("Error rewinding stream for fast indexing: %d" % ret)
 * 
 */
  __pyx_1 = (__pyx_v_ret < 0);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":551
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream for fast indexing: %d" % ret)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_3 = PyNumber_Remainder(__pyx_kp_28, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
    __pyx_3 = 0;
    __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
    __Pyx_Raise(__pyx_3, 0, 0);
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 551; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":554
 * 
 * 
 * 		avcodec_flush_buffers(self.CodecCtx)             # <<<<<<<<<<<<<<
 * 		time_base = AV_TIME_BASE * <int64_t>stream.time_base.num
 * 		frame_no = 0
 */
  avcodec_flush_buffers(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":555
 * 
 * 		avcodec_flush_buffers(self.CodecCtx)
 * 		time_base = AV_TIME_BASE * <int64_t>stream.time_base.num             # <<<<<<<<<<<<<<
 * 		frame_no = 0
 * 
 */
  __pyx_v_time_base = (AV_TIME_BASE * ((__pyx_t_8pyffmpeg_8pyffmpeg_int64_t)__pyx_v_stream->time_base.num));

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":556
 * 		avcodec_flush_buffers(self.CodecCtx)
 * 		time_base = AV_TIME_BASE * <int64_t>stream.time_base.num
 * 		frame_no = 0             # <<<<<<<<<<<<<<
 * 
 * 		self.CodecCtx.skip_idct = AVDISCARD_NONKEY
 */
  Py_INCREF(__pyx_int_0);
  Py_DECREF(__pyx_v_frame_no);
  __pyx_v_frame_no = __pyx_int_0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":558
 * 		frame_no = 0
 * 
 * 		self.CodecCtx.skip_idct = AVDISCARD_NONKEY             # <<<<<<<<<<<<<<
 * 		self.CodecCtx.skip_frame = AVDISCARD_NONKEY
 * 		while True:
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->skip_idct = AVDISCARD_NONKEY;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":559
 * 
 * 		self.CodecCtx.skip_idct = AVDISCARD_NONKEY
 * 		self.CodecCtx.skip_frame = AVDISCARD_NONKEY             # <<<<<<<<<<<<<<
 * 		while True:
 * 			ret = av_read_frame(self.FormatCtx,&self.packet)
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->skip_frame = AVDISCARD_NONKEY;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":560
 * 		self.CodecCtx.skip_idct = AVDISCARD_NONKEY
 * 		self.CodecCtx.skip_frame = AVDISCARD_NONKEY
 * 		while True:             # <<<<<<<<<<<<<<
 * 			ret = av_read_frame(self.FormatCtx,&self.packet)
 * 			if ret < 0:
 */
  while (1) {
    __pyx_1 = 1;
    if (!__pyx_1) break;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":561
 * 		self.CodecCtx.skip_frame = AVDISCARD_NONKEY
 * 		while True:
 * 			ret = av_read_frame(self.FormatCtx,&self.packet)             # <<<<<<<<<<<<<<
 * 			if ret < 0:
 * 				ret2 = url_feof(&self.FormatCtx.pb)
 */
    __pyx_v_ret = av_read_frame(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, (&((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet));

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":562
 * 		while True:
 * 			ret = av_read_frame(self.FormatCtx,&self.packet)
 * 			if ret < 0:             # <<<<<<<<<<<<<<
 * 				ret2 = url_feof(&self.FormatCtx.pb)
 * 				if  ret2 == 0:
 */
    __pyx_1 = (__pyx_v_ret < 0);
    if (__pyx_1) {

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":563
 * 			ret = av_read_frame(self.FormatCtx,&self.packet)
 * 			if ret < 0:
 * 				ret2 = url_feof(&self.FormatCtx.pb)             # <<<<<<<<<<<<<<
 * 				if  ret2 == 0:
 * 					raise IOError("Error reading frame for fast indexing: %d" % ret)
 */
      __pyx_v_ret2 = url_feof((&((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx->pb));

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":564
 * 			if ret < 0:
 * 				ret2 = url_feof(&self.FormatCtx.pb)
 * 				if  ret2 == 0:             # <<<<<<<<<<<<<<
 * 					raise IOError("Error reading frame for fast indexing: %d" % ret)
 * 				else:
 */
      __pyx_1 = (__pyx_v_ret2 == 0);
      if (__pyx_1) {

        /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":565
 * 				ret2 = url_feof(&self.FormatCtx.pb)
 * 				if  ret2 == 0:
 * 					raise IOError("Error reading frame for fast indexing: %d" % ret)             # <<<<<<<<<<<<<<
 * 				else:
 * 					break
 */
        __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_3 = PyNumber_Remainder(__pyx_kp_29, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        Py_DECREF(__pyx_2); __pyx_2 = 0;
        __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
        __pyx_3 = 0;
        __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
        __Pyx_Raise(__pyx_3, 0, 0);
        Py_DECREF(__pyx_3); __pyx_3 = 0;
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        goto __pyx_L10;
      }
      /*else*/ {

        /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":567
 * 					raise IOError("Error reading frame for fast indexing: %d" % ret)
 * 				else:
 * 					break             # <<<<<<<<<<<<<<
 * 			if self.packet.stream_index != self.videoStream:
 * 				continue
 */
        goto __pyx_L8;
      }
      __pyx_L10:;
      goto __pyx_L9;
    }
    __pyx_L9:;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":568
 * 				else:
 * 					break
 * 			if self.packet.stream_index != self.videoStream:             # <<<<<<<<<<<<<<
 * 				continue
 * 			if self.packet.pts == AV_NOPTS_VALUE:
 */
    __pyx_1 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.stream_index != ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream);
    if (__pyx_1) {

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":569
 * 					break
 * 			if self.packet.stream_index != self.videoStream:
 * 				continue             # <<<<<<<<<<<<<<
 * 			if self.packet.pts == AV_NOPTS_VALUE:
 * 				pts = self.packet.dts
 */
      goto __pyx_L7;
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":570
 * 			if self.packet.stream_index != self.videoStream:
 * 				continue
 * 			if self.packet.pts == AV_NOPTS_VALUE:             # <<<<<<<<<<<<<<
 * 				pts = self.packet.dts
 * 			else:
 */
    __pyx_1 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.pts == AV_NOPTS_VALUE);
    if (__pyx_1) {

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":571
 * 				continue
 * 			if self.packet.pts == AV_NOPTS_VALUE:
 * 				pts = self.packet.dts             # <<<<<<<<<<<<<<
 * 			else:
 * 				pts = self.packet.pts
 */
      __pyx_v_pts = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.dts;
      goto __pyx_L12;
    }
    /*else*/ {

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":573
 * 				pts = self.packet.dts
 * 			else:
 * 				pts = self.packet.pts             # <<<<<<<<<<<<<<
 * 			myPts = av_rescale(pts,time_base,stream.time_base.den)
 * 			self.keyframes.append(myPts)
 */
      __pyx_v_pts = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->packet.pts;
    }
    __pyx_L12:;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":574
 * 			else:
 * 				pts = self.packet.pts
 * 			myPts = av_rescale(pts,time_base,stream.time_base.den)             # <<<<<<<<<<<<<<
 * 			self.keyframes.append(myPts)
 * 		self.CodecCtx.skip_idct = AVDISCARD_ALL
 */
    __pyx_v_myPts = av_rescale(__pyx_v_pts, __pyx_v_time_base, __pyx_v_stream->time_base.den);

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":575
 * 				pts = self.packet.pts
 * 			myPts = av_rescale(pts,time_base,stream.time_base.den)
 * 			self.keyframes.append(myPts)             # <<<<<<<<<<<<<<
 * 		self.CodecCtx.skip_idct = AVDISCARD_ALL
 * 		self.CodecCtx.skip_frame = AVDISCARD_DEFAULT
 */
    __pyx_2 = PyLong_FromLongLong(__pyx_v_myPts); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_3 = __Pyx_PyObject_Append(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 575; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    __pyx_L7:;
  }
  __pyx_L8:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":576
 * 			myPts = av_rescale(pts,time_base,stream.time_base.den)
 * 			self.keyframes.append(myPts)
 * 		self.CodecCtx.skip_idct = AVDISCARD_ALL             # <<<<<<<<<<<<<<
 * 		self.CodecCtx.skip_frame = AVDISCARD_DEFAULT
 * 
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->skip_idct = AVDISCARD_ALL;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":577
 * 			self.keyframes.append(myPts)
 * 		self.CodecCtx.skip_idct = AVDISCARD_ALL
 * 		self.CodecCtx.skip_frame = AVDISCARD_DEFAULT             # <<<<<<<<<<<<<<
 * 
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->skip_frame = AVDISCARD_DEFAULT;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":579
 * 		self.CodecCtx.skip_frame = AVDISCARD_DEFAULT
 * 
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)             # <<<<<<<<<<<<<<
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream after fast indexing: %d" % ret)
 */
  __pyx_v_ret = av_seek_frame(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream, 0, AVSEEK_FLAG_BACKWARD);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":580
 * 
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:             # <<<<<<<<<<<<<<
 * 			raise IOError("Error rewinding stream after fast indexing: %d" % ret)
 * 		avcodec_flush_buffers(self.CodecCtx)
 */
  __pyx_1 = (__pyx_v_ret < 0);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":581
 * 		ret = av_seek_frame(self.FormatCtx,self.videoStream, 0, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream after fast indexing: %d" % ret)             # <<<<<<<<<<<<<<
 * 		avcodec_flush_buffers(self.CodecCtx)
 * 
 */
    __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_3 = PyNumber_Remainder(__pyx_kp_30, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
    __pyx_3 = 0;
    __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
    __Pyx_Raise(__pyx_3, 0, 0);
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 581; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L13;
  }
  __pyx_L13:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":582
 * 		if ret < 0:
 * 			raise IOError("Error rewinding stream after fast indexing: %d" % ret)
 * 		avcodec_flush_buffers(self.CodecCtx)             # <<<<<<<<<<<<<<
 * 
 * 	def GetFrameTime(self, int64_t timestamp):
 */
  avcodec_flush_buffers(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx);

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.build_index_fast");
  __pyx_r = NULL;
  __pyx_L0:;
  Py_DECREF(__pyx_v_frame_no);
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":584
 * 		avcodec_flush_buffers(self.CodecCtx)
 * 
 * 	def GetFrameTime(self, int64_t timestamp):             # <<<<<<<<<<<<<<
 * 		cdef int64_t targetPts
 * 		targetPts = timestamp * AV_TIME_BASE
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetFrameTime(PyObject *__pyx_v_self, PyObject *__pyx_arg_timestamp); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetFrameTime(PyObject *__pyx_v_self, PyObject *__pyx_arg_timestamp) {
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_timestamp;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_targetPts;
  PyObject *__pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;
  assert(__pyx_arg_timestamp); {
    __pyx_v_timestamp = __pyx_PyInt_AsLongLong(__pyx_arg_timestamp); if (unlikely((__pyx_v_timestamp == (signed PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 584; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.GetFrameTime");
  return NULL;
  __pyx_L4:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":586
 * 	def GetFrameTime(self, int64_t timestamp):
 * 		cdef int64_t targetPts
 * 		targetPts = timestamp * AV_TIME_BASE             # <<<<<<<<<<<<<<
 * 		return self.GetFramePts(targetPts)
 * 
 */
  __pyx_v_targetPts = (__pyx_v_timestamp * AV_TIME_BASE);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":587
 * 		cdef int64_t targetPts
 * 		targetPts = timestamp * AV_TIME_BASE
 * 		return self.GetFramePts(targetPts)             # <<<<<<<<<<<<<<
 * 
 * 	def GetFramePts(self,int64_t pts):
 */
  __pyx_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_GetFramePts); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PyLong_FromLongLong(__pyx_v_targetPts); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_3 = PyTuple_New(1); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyTuple_SET_ITEM(__pyx_3, 0, __pyx_2);
  __pyx_2 = 0;
  __pyx_2 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_3), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 587; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;
  Py_DECREF(((PyObject *)__pyx_3)); __pyx_3 = 0;
  __pyx_r = __pyx_2;
  __pyx_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_1);
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.GetFrameTime");
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":589
 * 		return self.GetFramePts(targetPts)
 * 
 * 	def GetFramePts(self,int64_t pts):             # <<<<<<<<<<<<<<
 * 		cdef int ret
 * 		cdef int64_t myPts
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetFramePts(PyObject *__pyx_v_self, PyObject *__pyx_arg_pts); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetFramePts(PyObject *__pyx_v_self, PyObject *__pyx_arg_pts) {
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_pts;
  int __pyx_v_ret;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_myPts;
  struct AVStream *__pyx_v_stream;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_targetPts;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_scaled_start_time;
  PyObject *__pyx_v_hurried_frames;
  PyObject *__pyx_r;
  int __pyx_1;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_4;
  assert(__pyx_arg_pts); {
    __pyx_v_pts = __pyx_PyInt_AsLongLong(__pyx_arg_pts); if (unlikely((__pyx_v_pts == (signed PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 589; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.GetFramePts");
  return NULL;
  __pyx_L4:;
  __pyx_v_hurried_frames = Py_None; Py_INCREF(Py_None);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":595
 * 		cdef int64_t targetPts,scaled_start_time
 * 
 * 		stream = self.FormatCtx.streams[self.videoStream]             # <<<<<<<<<<<<<<
 * 
 * 		scaled_start_time = av_rescale(stream.start_time,AV_TIME_BASE * <int64_t>stream.time_base.num,stream.time_base.den)
 */
  __pyx_v_stream = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx->streams[((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream]);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":597
 * 		stream = self.FormatCtx.streams[self.videoStream]
 * 
 * 		scaled_start_time = av_rescale(stream.start_time,AV_TIME_BASE * <int64_t>stream.time_base.num,stream.time_base.den)             # <<<<<<<<<<<<<<
 * 		targetPts = pts + scaled_start_time
 * 
 */
  __pyx_v_scaled_start_time = av_rescale(__pyx_v_stream->start_time, (AV_TIME_BASE * ((__pyx_t_8pyffmpeg_8pyffmpeg_int64_t)__pyx_v_stream->time_base.num)), __pyx_v_stream->time_base.den);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":598
 * 
 * 		scaled_start_time = av_rescale(stream.start_time,AV_TIME_BASE * <int64_t>stream.time_base.num,stream.time_base.den)
 * 		targetPts = pts + scaled_start_time             # <<<<<<<<<<<<<<
 * 
 * 		# why doesn't this work? It should be possible to seek only the video stream
 */
  __pyx_v_targetPts = (__pyx_v_pts + __pyx_v_scaled_start_time);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":602
 * 		# why doesn't this work? It should be possible to seek only the video stream
 * 		#ret = av_seek_frame(self.FormatCtx,self.videoStream,targetPts, AVSEEK_FLAG_BACKWARD)
 * 		ret = av_seek_frame(self.FormatCtx,-1,targetPts, AVSEEK_FLAG_BACKWARD)             # <<<<<<<<<<<<<<
 * 		if ret < 0:
 * 			raise IOError("Unable to seek: %d" % ret)
 */
  __pyx_v_ret = av_seek_frame(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, -1, __pyx_v_targetPts, AVSEEK_FLAG_BACKWARD);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":603
 * 		#ret = av_seek_frame(self.FormatCtx,self.videoStream,targetPts, AVSEEK_FLAG_BACKWARD)
 * 		ret = av_seek_frame(self.FormatCtx,-1,targetPts, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:             # <<<<<<<<<<<<<<
 * 			raise IOError("Unable to seek: %d" % ret)
 * 		avcodec_flush_buffers(self.CodecCtx)
 */
  __pyx_1 = (__pyx_v_ret < 0);
  if (__pyx_1) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":604
 * 		ret = av_seek_frame(self.FormatCtx,-1,targetPts, AVSEEK_FLAG_BACKWARD)
 * 		if ret < 0:
 * 			raise IOError("Unable to seek: %d" % ret)             # <<<<<<<<<<<<<<
 * 		avcodec_flush_buffers(self.CodecCtx)
 * 
 */
    __pyx_2 = PyInt_FromLong(__pyx_v_ret); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_3 = PyNumber_Remainder(__pyx_kp_31, __pyx_2); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    __pyx_2 = PyTuple_New(1); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    PyTuple_SET_ITEM(__pyx_2, 0, __pyx_3);
    __pyx_3 = 0;
    __pyx_3 = PyObject_Call(__pyx_builtin_IOError, ((PyObject *)__pyx_2), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(((PyObject *)__pyx_2)); __pyx_2 = 0;
    __Pyx_Raise(__pyx_3, 0, 0);
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":605
 * 		if ret < 0:
 * 			raise IOError("Unable to seek: %d" % ret)
 * 		avcodec_flush_buffers(self.CodecCtx)             # <<<<<<<<<<<<<<
 * 
 * 		# if we hurry it we can get bad frames later in the GOP
 */
  avcodec_flush_buffers(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":608
 * 
 * 		# if we hurry it we can get bad frames later in the GOP
 * 		self.CodecCtx.skip_idct = AVDISCARD_BIDIR             # <<<<<<<<<<<<<<
 * 		self.CodecCtx.skip_frame = AVDISCARD_BIDIR
 * 
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->skip_idct = AVDISCARD_BIDIR;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":609
 * 		# if we hurry it we can get bad frames later in the GOP
 * 		self.CodecCtx.skip_idct = AVDISCARD_BIDIR
 * 		self.CodecCtx.skip_frame = AVDISCARD_BIDIR             # <<<<<<<<<<<<<<
 * 
 * 		#self.CodecCtx.hurry_up = 1
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->skip_frame = AVDISCARD_BIDIR;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":612
 * 
 * 		#self.CodecCtx.hurry_up = 1
 * 		hurried_frames = 0             # <<<<<<<<<<<<<<
 * 		while True:
 * 			myPts = self.__next_frame()
 */
  Py_INCREF(__pyx_int_0);
  Py_DECREF(__pyx_v_hurried_frames);
  __pyx_v_hurried_frames = __pyx_int_0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":613
 * 		#self.CodecCtx.hurry_up = 1
 * 		hurried_frames = 0
 * 		while True:             # <<<<<<<<<<<<<<
 * 			myPts = self.__next_frame()
 * 			if myPts >= targetPts:
 */
  while (1) {
    __pyx_1 = 1;
    if (!__pyx_1) break;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":614
 * 		hurried_frames = 0
 * 		while True:
 * 			myPts = self.__next_frame()             # <<<<<<<<<<<<<<
 * 			if myPts >= targetPts:
 * 				break
 */
    __pyx_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp___next_frame); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_3 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    __pyx_4 = __pyx_PyInt_AsLongLong(__pyx_3); if (unlikely((__pyx_4 == (signed PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_3); __pyx_3 = 0;
    __pyx_v_myPts = __pyx_4;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":615
 * 		while True:
 * 			myPts = self.__next_frame()
 * 			if myPts >= targetPts:             # <<<<<<<<<<<<<<
 * 				break
 * 
 */
    __pyx_1 = (__pyx_v_myPts >= __pyx_v_targetPts);
    if (__pyx_1) {

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":616
 * 			myPts = self.__next_frame()
 * 			if myPts >= targetPts:
 * 				break             # <<<<<<<<<<<<<<
 * 
 * 		#self.CodecCtx.hurry_up = 0
 */
      goto __pyx_L7;
      goto __pyx_L8;
    }
    __pyx_L8:;
  }
  __pyx_L7:;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":620
 * 		#self.CodecCtx.hurry_up = 0
 * 
 * 		self.CodecCtx.skip_idct = AVDISCARD_DEFAULT             # <<<<<<<<<<<<<<
 * 		self.CodecCtx.skip_frame = AVDISCARD_DEFAULT
 * 		return self.GetCurrentFrame()
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->skip_idct = AVDISCARD_DEFAULT;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":621
 * 
 * 		self.CodecCtx.skip_idct = AVDISCARD_DEFAULT
 * 		self.CodecCtx.skip_frame = AVDISCARD_DEFAULT             # <<<<<<<<<<<<<<
 * 		return self.GetCurrentFrame()
 * 
 */
  ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx->skip_frame = AVDISCARD_DEFAULT;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":622
 * 		self.CodecCtx.skip_idct = AVDISCARD_DEFAULT
 * 		self.CodecCtx.skip_frame = AVDISCARD_DEFAULT
 * 		return self.GetCurrentFrame()             # <<<<<<<<<<<<<<
 * 
 * 	def GetFrameNo(self, int frame_no):
 */
  __pyx_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_GetCurrentFrame); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_3 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_2); __pyx_2 = 0;
  __pyx_r = __pyx_3;
  __pyx_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.GetFramePts");
  __pyx_r = NULL;
  __pyx_L0:;
  Py_DECREF(__pyx_v_hurried_frames);
  return __pyx_r;
}

/* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":624
 * 		return self.GetCurrentFrame()
 * 
 * 	def GetFrameNo(self, int frame_no):             # <<<<<<<<<<<<<<
 * 		cdef int ret,steps,i
 * 		cdef int64_t myPts
 */

static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetFrameNo(PyObject *__pyx_v_self, PyObject *__pyx_arg_frame_no); /*proto*/
static PyObject *__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetFrameNo(PyObject *__pyx_v_self, PyObject *__pyx_arg_frame_no) {
  int __pyx_v_frame_no;
  int __pyx_v_ret;
  int __pyx_v_steps;
  int __pyx_v_i;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_v_myPts;
  float __pyx_v_my_timestamp;
  float __pyx_v_frame_rate;
  struct AVStream *__pyx_v_stream;
  PyObject *__pyx_v_index;
  PyObject *__pyx_r;
  PyObject *__pyx_1 = 0;
  PyObject *__pyx_2 = 0;
  PyObject *__pyx_3 = 0;
  int __pyx_4;
  __pyx_t_8pyffmpeg_8pyffmpeg_int64_t __pyx_5;
  assert(__pyx_arg_frame_no); {
    __pyx_v_frame_no = __pyx_PyInt_int(__pyx_arg_frame_no); if (unlikely((__pyx_v_frame_no == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.GetFrameNo");
  return NULL;
  __pyx_L4:;
  __pyx_v_index = Py_None; Py_INCREF(Py_None);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":631
 * 		cdef AVStream *stream
 * 
 * 		stream = self.FormatCtx.streams[self.videoStream]             # <<<<<<<<<<<<<<
 * 		#if self.keyframes is None:
 * 			# no index at all, so figure out the pts from the frame rate and frame_no
 */
  __pyx_v_stream = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx->streams[((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream]);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":640
 * 		# a reason to do it anyother way
 * 
 * 		frame_rate = (<float>stream.r_frame_rate.num / <float>stream.r_frame_rate.den)             # <<<<<<<<<<<<<<
 * 		my_timestamp = frame_no / frame_rate
 * 		return self.GetFrameTime(my_timestamp)
 */
  __pyx_v_frame_rate = (((float)__pyx_v_stream->r_frame_rate.num) / ((float)__pyx_v_stream->r_frame_rate.den));

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":641
 * 
 * 		frame_rate = (<float>stream.r_frame_rate.num / <float>stream.r_frame_rate.den)
 * 		my_timestamp = frame_no / frame_rate             # <<<<<<<<<<<<<<
 * 		return self.GetFrameTime(my_timestamp)
 * 
 */
  __pyx_v_my_timestamp = (__pyx_v_frame_no / __pyx_v_frame_rate);

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":642
 * 		frame_rate = (<float>stream.r_frame_rate.num / <float>stream.r_frame_rate.den)
 * 		my_timestamp = frame_no / frame_rate
 * 		return self.GetFrameTime(my_timestamp)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_GetFrameTime); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_2 = PyFloat_FromDouble(__pyx_v_my_timestamp); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_3 = PyTuple_New(1); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  PyTuple_SET_ITEM(__pyx_3, 0, __pyx_2);
  __pyx_2 = 0;
  __pyx_2 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_3), NULL); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 642; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;
  Py_DECREF(((PyObject *)__pyx_3)); __pyx_3 = 0;
  __pyx_r = __pyx_2;
  __pyx_2 = 0;
  goto __pyx_L0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":645
 * 
 * 
 * 		if self.index is None:             # <<<<<<<<<<<<<<
 * 			# we don't have a full index, so we'll have to fake it from the keyframes
 * 			index = frame_no
 */
  __pyx_4 = (((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->index == Py_None);
  if (__pyx_4) {

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":647
 * 		if self.index is None:
 * 			# we don't have a full index, so we'll have to fake it from the keyframes
 * 			index = frame_no             # <<<<<<<<<<<<<<
 * 			steps = 0
 * 			while index not in self.keyframes:
 */
    __pyx_1 = PyInt_FromLong(__pyx_v_frame_no); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_v_index);
    __pyx_v_index = __pyx_1;
    __pyx_1 = 0;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":648
 * 			# we don't have a full index, so we'll have to fake it from the keyframes
 * 			index = frame_no
 * 			steps = 0             # <<<<<<<<<<<<<<
 * 			while index not in self.keyframes:
 * 				index = index - 1
 */
    __pyx_v_steps = 0;

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":649
 * 			index = frame_no
 * 			steps = 0
 * 			while index not in self.keyframes:             # <<<<<<<<<<<<<<
 * 				index = index - 1
 * 				steps = steps + 1
 */
    while (1) {
      __pyx_4 = (!PySequence_Contains(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes, __pyx_v_index)); if (unlikely(__pyx_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 649; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      if (!__pyx_4) break;

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":650
 * 			steps = 0
 * 			while index not in self.keyframes:
 * 				index = index - 1             # <<<<<<<<<<<<<<
 * 				steps = steps + 1
 * 
 */
      __pyx_3 = PyNumber_Subtract(__pyx_v_index, __pyx_int_1); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 650; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      Py_DECREF(__pyx_v_index);
      __pyx_v_index = __pyx_3;
      __pyx_3 = 0;

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":651
 * 			while index not in self.keyframes:
 * 				index = index - 1
 * 				steps = steps + 1             # <<<<<<<<<<<<<<
 * 
 * 			ret = av_seek_frame(self.FormatCtx, self.videoStream, self.keyframes[index], AVSEEK_FLAG_BACKWARD)
 */
      __pyx_v_steps = (__pyx_v_steps + 1);
    }

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":653
 * 				steps = steps + 1
 * 
 * 			ret = av_seek_frame(self.FormatCtx, self.videoStream, self.keyframes[index], AVSEEK_FLAG_BACKWARD)             # <<<<<<<<<<<<<<
 * 			avcodec_flush_buffers(self.CodecCtx)
 * 			for i from 0 <= i < steps:
 */
    __pyx_2 = PyObject_GetItem(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->keyframes, __pyx_v_index); if (!__pyx_2) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_5 = __pyx_PyInt_AsLongLong(__pyx_2); if (unlikely((__pyx_5 == (signed PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 653; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    __pyx_v_ret = av_seek_frame(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->FormatCtx, ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->videoStream, __pyx_5, AVSEEK_FLAG_BACKWARD);

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":654
 * 
 * 			ret = av_seek_frame(self.FormatCtx, self.videoStream, self.keyframes[index], AVSEEK_FLAG_BACKWARD)
 * 			avcodec_flush_buffers(self.CodecCtx)             # <<<<<<<<<<<<<<
 * 			for i from 0 <= i < steps:
 * 				myPts = self.__next_frame()
 */
    avcodec_flush_buffers(((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)__pyx_v_self)->CodecCtx);

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":655
 * 			ret = av_seek_frame(self.FormatCtx, self.videoStream, self.keyframes[index], AVSEEK_FLAG_BACKWARD)
 * 			avcodec_flush_buffers(self.CodecCtx)
 * 			for i from 0 <= i < steps:             # <<<<<<<<<<<<<<
 * 				myPts = self.__next_frame()
 * 			return self.GetCurrentFrame()
 */
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_v_steps; __pyx_v_i++) {

      /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":656
 * 			avcodec_flush_buffers(self.CodecCtx)
 * 			for i from 0 <= i < steps:
 * 				myPts = self.__next_frame()             # <<<<<<<<<<<<<<
 * 			return self.GetCurrentFrame()
 * 		else:
 */
      __pyx_1 = PyObject_GetAttr(__pyx_v_self, __pyx_kp___next_frame); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_3 = PyObject_Call(__pyx_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      Py_DECREF(__pyx_1); __pyx_1 = 0;
      __pyx_5 = __pyx_PyInt_AsLongLong(__pyx_3); if (unlikely((__pyx_5 == (signed PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 656; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      Py_DECREF(__pyx_3); __pyx_3 = 0;
      __pyx_v_myPts = __pyx_5;
    }

    /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":657
 * 			for i from 0 <= i < steps:
 * 				myPts = self.__next_frame()
 * 			return self.GetCurrentFrame()             # <<<<<<<<<<<<<<
 * 		else:
 * 			# use the full index here, I deleted the code but don't seem to need it anyway
 */
    __pyx_2 = PyObject_GetAttr(__pyx_v_self, __pyx_kp_GetCurrentFrame); if (unlikely(!__pyx_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_1 = PyObject_Call(__pyx_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 657; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    Py_DECREF(__pyx_2); __pyx_2 = 0;
    __pyx_r = __pyx_1;
    __pyx_1 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {
  }
  __pyx_L5:;

  __pyx_r = Py_None; Py_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  Py_XDECREF(__pyx_1);
  Py_XDECREF(__pyx_2);
  Py_XDECREF(__pyx_3);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg.VideoStream.GetFrameNo");
  __pyx_r = NULL;
  __pyx_L0:;
  Py_DECREF(__pyx_v_index);
  return __pyx_r;
}
static struct __pyx_vtabstruct_8pyffmpeg_8pyffmpeg_VideoStream __pyx_vtable_8pyffmpeg_8pyffmpeg_VideoStream;

static PyObject *__pyx_tp_new_8pyffmpeg_8pyffmpeg_VideoStream(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)o);
  p->__pyx_vtab = __pyx_vtabptr_8pyffmpeg_8pyffmpeg_VideoStream;
  p->filename = Py_None; Py_INCREF(Py_None);
  p->index = Py_None; Py_INCREF(Py_None);
  p->keyframes = Py_None; Py_INCREF(Py_None);
  if (__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream___new__(o, __pyx_empty_tuple, NULL) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_8pyffmpeg_8pyffmpeg_VideoStream(PyObject *o) {
  struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *p = (struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)o;
  Py_XDECREF(p->filename);
  Py_XDECREF(p->index);
  Py_XDECREF(p->keyframes);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pyffmpeg_8pyffmpeg_VideoStream(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *p = (struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)o;
  if (p->filename) {
    e = (*v)(p->filename, a); if (e) return e;
  }
  if (p->index) {
    e = (*v)(p->index, a); if (e) return e;
  }
  if (p->keyframes) {
    e = (*v)(p->keyframes, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pyffmpeg_8pyffmpeg_VideoStream(PyObject *o) {
  struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *p = (struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->filename);
  p->filename = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->index);
  p->index = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->keyframes);
  p->keyframes = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static struct PyMethodDef __pyx_methods_8pyffmpeg_8pyffmpeg_VideoStream[] = {
  {"dump", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_dump, METH_NOARGS, 0},
  {"open", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_open, METH_O, 0},
  {"SaveFrame", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_SaveFrame, METH_NOARGS, 0},
  {"GetCurrentFrame", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetCurrentFrame, METH_NOARGS, 0},
  {"__next_frame", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream___next_frame, METH_NOARGS, 0},
  {"GetNextFrame", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetNextFrame, METH_NOARGS, 0},
  {"build_index", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_build_index, METH_VARARGS|METH_KEYWORDS, 0},
  {"build_index_full", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_build_index_full, METH_NOARGS, 0},
  {"build_index_fast", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_build_index_fast, METH_NOARGS, 0},
  {"GetFrameTime", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetFrameTime, METH_O, 0},
  {"GetFramePts", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetFramePts, METH_O, 0},
  {"GetFrameNo", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_11VideoStream_GetFrameNo, METH_O, 0},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_VideoStream = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  0, /*nb_long*/
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_VideoStream = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_VideoStream = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_VideoStream = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_NEWBUFFER)
  0, /*bf_getbuffer*/
  #endif
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_NEWBUFFER)
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_8pyffmpeg_8pyffmpeg_VideoStream = {
  PyVarObject_HEAD_INIT(0, 0)
  "pyffmpeg.pyffmpeg.VideoStream", /*tp_name*/
  sizeof(struct __pyx_obj_8pyffmpeg_8pyffmpeg_VideoStream), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pyffmpeg_8pyffmpeg_VideoStream, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_compare*/
  0, /*tp_repr*/
  &__pyx_tp_as_number_VideoStream, /*tp_as_number*/
  &__pyx_tp_as_sequence_VideoStream, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_VideoStream, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_VideoStream, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pyffmpeg_8pyffmpeg_VideoStream, /*tp_traverse*/
  __pyx_tp_clear_8pyffmpeg_8pyffmpeg_VideoStream, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pyffmpeg_8pyffmpeg_VideoStream, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pyffmpeg_8pyffmpeg_VideoStream, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
};

static struct PyMethodDef __pyx_methods[] = {
  {"py_av_register_all", (PyCFunction)__pyx_pf_8pyffmpeg_8pyffmpeg_py_av_register_all, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static void __pyx_init_filenames(void); /*proto*/

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "pyffmpeg",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp___cinit__, __pyx_k___cinit__, sizeof(__pyx_k___cinit__), 1, 1, 1},
  {&__pyx_kp_dump, __pyx_k_dump, sizeof(__pyx_k_dump), 0, 1, 1},
  {&__pyx_kp_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 1, 1},
  {&__pyx_kp_SaveFrame, __pyx_k_SaveFrame, sizeof(__pyx_k_SaveFrame), 0, 1, 1},
  {&__pyx_kp_GetCurrentFrame, __pyx_k_GetCurrentFrame, sizeof(__pyx_k_GetCurrentFrame), 0, 1, 1},
  {&__pyx_kp___next_frame, __pyx_k___next_frame, sizeof(__pyx_k___next_frame), 0, 1, 1},
  {&__pyx_kp_GetNextFrame, __pyx_k_GetNextFrame, sizeof(__pyx_k_GetNextFrame), 0, 1, 1},
  {&__pyx_kp_build_index, __pyx_k_build_index, sizeof(__pyx_k_build_index), 0, 1, 1},
  {&__pyx_kp_build_index_full, __pyx_k_build_index_full, sizeof(__pyx_k_build_index_full), 0, 1, 1},
  {&__pyx_kp_build_index_fast, __pyx_k_build_index_fast, sizeof(__pyx_k_build_index_fast), 0, 1, 1},
  {&__pyx_kp_GetFrameTime, __pyx_k_GetFrameTime, sizeof(__pyx_k_GetFrameTime), 0, 1, 1},
  {&__pyx_kp_GetFramePts, __pyx_k_GetFramePts, sizeof(__pyx_k_GetFramePts), 0, 1, 1},
  {&__pyx_kp_GetFrameNo, __pyx_k_GetFrameNo, sizeof(__pyx_k_GetFrameNo), 0, 1, 1},
  {&__pyx_kp_Image, __pyx_k_Image, sizeof(__pyx_k_Image), 1, 1, 1},
  {&__pyx_kp_py_av_register_all, __pyx_k_py_av_register_all, sizeof(__pyx_k_py_av_register_all), 0, 1, 1},
  {&__pyx_kp_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 1, 1, 1},
  {&__pyx_kp_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 1, 1, 1},
  {&__pyx_kp_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 1, 0},
  {&__pyx_kp_write, __pyx_k_write, sizeof(__pyx_k_write), 1, 1, 1},
  {&__pyx_kp_flush, __pyx_k_flush, sizeof(__pyx_k_flush), 1, 1, 1},
  {&__pyx_kp_close, __pyx_k_close, sizeof(__pyx_k_close), 1, 1, 1},
  {&__pyx_kp_frombuffer, __pyx_k_frombuffer, sizeof(__pyx_k_frombuffer), 1, 1, 1},
  {&__pyx_kp_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 1, 0},
  {&__pyx_kp_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 1, 0},
  {&__pyx_kp_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 1, 0},
  {&__pyx_kp_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 1, 0},
  {&__pyx_kp_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 1, 0},
  {&__pyx_kp_22, __pyx_k_22, sizeof(__pyx_k_22), 0, 1, 0},
  {&__pyx_kp_23, __pyx_k_23, sizeof(__pyx_k_23), 0, 1, 0},
  {&__pyx_kp_24, __pyx_k_24, sizeof(__pyx_k_24), 0, 1, 0},
  {&__pyx_kp_25, __pyx_k_25, sizeof(__pyx_k_25), 0, 1, 0},
  {&__pyx_kp_26, __pyx_k_26, sizeof(__pyx_k_26), 0, 1, 0},
  {&__pyx_kp_append, __pyx_k_append, sizeof(__pyx_k_append), 1, 1, 1},
  {&__pyx_kp_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 0},
  {&__pyx_kp_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 0},
  {&__pyx_kp_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 0},
  {&__pyx_kp_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 0},
  {&__pyx_kp_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 0},
  {&__pyx_kp_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 0},
  {&__pyx_kp_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 0},
  {&__pyx_kp_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 0},
  {&__pyx_kp_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 0},
  {&__pyx_kp_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 0, 0},
  {&__pyx_kp_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 0, 0},
  {&__pyx_kp_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 0, 0},
  {&__pyx_kp_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 0, 0},
  {&__pyx_kp_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 0, 0},
  {&__pyx_kp_27, __pyx_k_27, sizeof(__pyx_k_27), 0, 0, 0},
  {&__pyx_kp_28, __pyx_k_28, sizeof(__pyx_k_28), 0, 0, 0},
  {&__pyx_kp_29, __pyx_k_29, sizeof(__pyx_k_29), 0, 0, 0},
  {&__pyx_kp_30, __pyx_k_30, sizeof(__pyx_k_30), 0, 0, 0},
  {&__pyx_kp_31, __pyx_k_31, sizeof(__pyx_k_31), 0, 0, 0},
  {0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_IOError = __Pyx_GetName(__pyx_b, __pyx_kp_IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_MemoryError = __Pyx_GetName(__pyx_b, __pyx_kp_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_open = __Pyx_GetName(__pyx_b, __pyx_kp_open); if (!__pyx_builtin_open) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpyffmpeg(void); /*proto*/
PyMODINIT_FUNC initpyffmpeg(void)
#else
PyMODINIT_FUNC PyInit_pyffmpeg(void); /*proto*/
PyMODINIT_FUNC PyInit_pyffmpeg(void)
#endif
{
  PyObject *__pyx_1 = 0;
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Libary function declarations ---*/
  __pyx_init_filenames();
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pyffmpeg", __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME);
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_skip_dispatch = 0;
  /*--- Global init code ---*/
  __pyx_v_8pyffmpeg_8pyffmpeg___registered = Py_None; Py_INCREF(Py_None);
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_8pyffmpeg_8pyffmpeg_VideoStream = &__pyx_vtable_8pyffmpeg_8pyffmpeg_VideoStream;
  *(void(**)(void))&__pyx_vtable_8pyffmpeg_8pyffmpeg_VideoStream.ConvertToRGBA = (void(*)(void))__pyx_f_8pyffmpeg_8pyffmpeg_11VideoStream_ConvertToRGBA;
  *(void(**)(void))&__pyx_vtable_8pyffmpeg_8pyffmpeg_VideoStream.ConvertToRGB24 = (void(*)(void))__pyx_f_8pyffmpeg_8pyffmpeg_11VideoStream_ConvertToRGB24;
  if (PyType_Ready(&__pyx_type_8pyffmpeg_8pyffmpeg_VideoStream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetVtable(__pyx_type_8pyffmpeg_8pyffmpeg_VideoStream.tp_dict, __pyx_vtabptr_8pyffmpeg_8pyffmpeg_VideoStream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "VideoStream", (PyObject *)&__pyx_type_8pyffmpeg_8pyffmpeg_VideoStream) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_8pyffmpeg_8pyffmpeg_VideoStream = &__pyx_type_8pyffmpeg_8pyffmpeg_VideoStream;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":19
 * # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 * import Image             # <<<<<<<<<<<<<<
 * 
 * ctypedef signed long long int64_t
 */
  __pyx_1 = __Pyx_Import(__pyx_kp_Image, 0); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttr(__pyx_m, __pyx_kp_Image, __pyx_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_DECREF(__pyx_1); __pyx_1 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":278
 * 
 * cdef __registered
 * __registered = 0             # <<<<<<<<<<<<<<
 * 
 * def py_av_register_all():
 */
  Py_INCREF(__pyx_int_0);
  Py_DECREF(__pyx_v_8pyffmpeg_8pyffmpeg___registered);
  __pyx_v_8pyffmpeg_8pyffmpeg___registered = __pyx_int_0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":287
 * 
 * cdef AVRational AV_TIME_BASE_Q
 * AV_TIME_BASE_Q.num = 1             # <<<<<<<<<<<<<<
 * AV_TIME_BASE_Q.den = AV_TIME_BASE
 * cdef class VideoStream:
 */
  __pyx_v_8pyffmpeg_8pyffmpeg_AV_TIME_BASE_Q.num = 1;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":288
 * cdef AVRational AV_TIME_BASE_Q
 * AV_TIME_BASE_Q.num = 1
 * AV_TIME_BASE_Q.den = AV_TIME_BASE             # <<<<<<<<<<<<<<
 * cdef class VideoStream:
 * 	cdef AVFormatContext *FormatCtx
 */
  __pyx_v_8pyffmpeg_8pyffmpeg_AV_TIME_BASE_Q.den = AV_TIME_BASE;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":464
 * 		return self.GetCurrentFrame()
 * 
 * 	def build_index(self,fast = True):             # <<<<<<<<<<<<<<
 * 		if fast == True:
 * 			return self.build_index_fast()
 */
  __pyx_1 = __Pyx_PyBool_FromLong(1); if (unlikely(!__pyx_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k_1 = __pyx_1;
  __pyx_1 = 0;

  /* "/home/thor/src/pyffmpeg-np/pyffmpeg/pyffmpeg.pyx":624
 * 		return self.GetCurrentFrame()
 * 
 * 	def GetFrameNo(self, int frame_no):             # <<<<<<<<<<<<<<
 * 		cdef int ret,steps,i
 * 		cdef int64_t myPts
 */
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
  __pyx_L1_error:;
  Py_XDECREF(__pyx_1);
  __Pyx_AddTraceback("pyffmpeg.pyffmpeg");
  #if PY_MAJOR_VERSION >= 3
  return NULL;
  #endif
}

static const char *__pyx_filenames[] = {
  "pyffmpeg.pyx",
};

/* Runtime support code */

static void __pyx_init_filenames(void) {
  __pyx_f = __pyx_filenames;
}

static INLINE void __Pyx_RaiseArgtupleTooLong(
    Py_ssize_t num_expected,
    Py_ssize_t num_found)
{
    const char* error_message =
    #if PY_VERSION_HEX < 0x02050000
        "function takes at most %d positional arguments (%d given)";
    #else
        "function takes at most %zd positional arguments (%zd given)";
    #endif
    PyErr_Format(PyExc_TypeError, error_message, num_expected, num_found);
}

static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key))) {
        #else
        if (unlikely(!PyUnicode_Check(key))) {
        #endif
            PyErr_Format(PyExc_TypeError,
                         "%s() keywords must be strings", function_name);
            return 0;
        }
    }
    if (unlikely(!kw_allowed) && unlikely(key)) {
        PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION < 3
                     "'%s' is an invalid keyword argument for this function",
                     PyString_AsString(key));
        #else
                     "'%U' is an invalid keyword argument for this function",
                     key);
        #endif
        return 0;
    }
    return 1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *__import__ = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    __import__ = PyObject_GetAttrString(__pyx_b, "__import__");
    if (!__import__)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunction(__import__, "OOOO",
        name, global_dict, empty_dict, list);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(__import__);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }
    PyErr_Restore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}


static void __Pyx_WriteUnraisable(const char *name) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    PyErr_Fetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    PyErr_Restore(old_exc, old_val, old_tb);
    if (!ctx)
        ctx = Py_None;
    PyErr_WriteUnraisable(ctx);
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
    PyObject *pycobj = 0;
    int result;
    
    pycobj = PyCObject_FromVoidPtr(vtable, 0);
    if (!pycobj)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", pycobj) < 0)
        goto bad;
    result = 0;
    goto done;

bad:
    result = -1;
done:
    Py_XDECREF(pycobj);
    return result;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyObject *empty_string = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    #if PY_MAJOR_VERSION < 3
    empty_string = PyString_FromStringAndSize("", 0);
    #else
    empty_string = PyBytes_FromStringAndSize("", 0);
    #endif
    if (!empty_string) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        empty_string, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        empty_string  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_Get(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(empty_string);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode && (!t->is_identifier)) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_identifier || (t->is_unicode && t->intern)) {
            *t->p = PyUnicode_InternFromString(t->s);
        } else if (t->is_unicode) {
            *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static INLINE Py_ssize_t __pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   if (x == Py_True) return 1;
   else if (x == Py_False) return 0;
   else return PyObject_IsTrue(x);
}

static INLINE PY_LONG_LONG __pyx_PyInt_AsLongLong(PyObject* x) {
    if (PyInt_CheckExact(x)) {
        return PyInt_AS_LONG(x);
    }
    else if (PyLong_CheckExact(x)) {
        return PyLong_AsLongLong(x);
    }
    else {
        PY_LONG_LONG val;
        PyObject* tmp = PyNumber_Int(x); if (!tmp) return (PY_LONG_LONG)-1;
        val = __pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static INLINE unsigned PY_LONG_LONG __pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    if (PyInt_CheckExact(x)) {
        long val = PyInt_AS_LONG(x);
        if (unlikely(val < 0)) {
            PyErr_SetString(PyExc_TypeError, "Negative assignment to unsigned type.");
            return (unsigned PY_LONG_LONG)-1;
        }
        return val;
    }
    else if (PyLong_CheckExact(x)) {
        return PyLong_AsUnsignedLongLong(x);
    }
    else {
        PY_LONG_LONG val;
        PyObject* tmp = PyNumber_Int(x); if (!tmp) return (PY_LONG_LONG)-1;
        val = __pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}


static INLINE unsigned char __pyx_PyInt_unsigned_char(PyObject* x) {
    if (sizeof(unsigned char) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        unsigned char val = (unsigned char)long_val;
        if (unlikely((val != long_val)  || (long_val < 0))) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to unsigned char");
            return (unsigned char)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE unsigned short __pyx_PyInt_unsigned_short(PyObject* x) {
    if (sizeof(unsigned short) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        unsigned short val = (unsigned short)long_val;
        if (unlikely((val != long_val)  || (long_val < 0))) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to unsigned short");
            return (unsigned short)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE char __pyx_PyInt_char(PyObject* x) {
    if (sizeof(char) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        char val = (char)long_val;
        if (unlikely((val != long_val) )) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to char");
            return (char)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE short __pyx_PyInt_short(PyObject* x) {
    if (sizeof(short) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        short val = (short)long_val;
        if (unlikely((val != long_val) )) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to short");
            return (short)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE int __pyx_PyInt_int(PyObject* x) {
    if (sizeof(int) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        int val = (int)long_val;
        if (unlikely((val != long_val) )) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to int");
            return (int)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE long __pyx_PyInt_long(PyObject* x) {
    if (sizeof(long) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        long val = (long)long_val;
        if (unlikely((val != long_val) )) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to long");
            return (long)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE signed char __pyx_PyInt_signed_char(PyObject* x) {
    if (sizeof(signed char) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        signed char val = (signed char)long_val;
        if (unlikely((val != long_val) )) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to signed char");
            return (signed char)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE signed short __pyx_PyInt_signed_short(PyObject* x) {
    if (sizeof(signed short) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        signed short val = (signed short)long_val;
        if (unlikely((val != long_val) )) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to signed short");
            return (signed short)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE signed int __pyx_PyInt_signed_int(PyObject* x) {
    if (sizeof(signed int) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        signed int val = (signed int)long_val;
        if (unlikely((val != long_val) )) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to signed int");
            return (signed int)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE signed long __pyx_PyInt_signed_long(PyObject* x) {
    if (sizeof(signed long) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        signed long val = (signed long)long_val;
        if (unlikely((val != long_val) )) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to signed long");
            return (signed long)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

static INLINE long double __pyx_PyInt_long_double(PyObject* x) {
    if (sizeof(long double) < sizeof(long)) {
        long long_val = __pyx_PyInt_AsLong(x);
        long double val = (long double)long_val;
        if (unlikely((val != long_val) )) {
            PyErr_SetString(PyExc_OverflowError, "value too large to convert to long double");
            return (long double)-1;
        }
        return val;
    }
    else {
        return __pyx_PyInt_AsLong(x);
    }
}

